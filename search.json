[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "United Explorer Project Documentation",
    "section": "",
    "text": "Preface\nThis book documents my entry for Posit’s 2025 Table Contest, the Unofficial United Mainline Fleet Tracker.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "United Explorer Project Documentation",
    "section": "",
    "text": "I blame my decision to pick up a philosophy major for this perspective.↩︎\nIf I may be so bold to call it that.↩︎",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Coming Up With a Project Idea",
    "section": "",
    "text": "1.1 Why Track the United Fleet?\nSo, if you’re like me, you’ll see this table project and think to yourself:\nGreat question. And it was the same question I asked myself up until about a week before the project deadline. Very confidence inspiring, I know.\nI think the simplest way to explain this part of the process is just to characterize it as leveraging your interests and stubbornness. As in, pick a project idea you actually want to do, and that you’re likely to be committed enough to the sunk cost fallacy in order to see through until the end after the countless bouts of frustration that lie before you.1\nI’m an aviation nerd. It really boils down to that. Before I took up the political science/philosophy route I was interested in becoming an aerospace engineer. There’s probably a bunch of aphorisms I could pick here about plans and the universe, so here we are; I still have the interest. It helps that I’ve flown United recently, so I guess there’s some recency bias at play.\nWeb development for R also is an area of interest for me. I’m really impressed at how far the ecosystem stretches with Quarto and Shiny. What’s more impressive is how certain packages work together with others in unexpected ways (spoiler: mapgl and gt!) that can produce some really cool outcomes. It’s kind of like snapping Lego bricks together.2 Naturally, I wanted to see how far these Lego bricks could go, i.e., could I build something that kind of mimicked flight tracking websites like FlightAware, FlightRadar24, etc., using said Lego bricks? Well we’re about to find out!\nFinally, I had the pleasure of attending the R in Production workshop at posit::conf(2025) which taught me a lot of cool things about, you guessed it, putting R in production. Neat things with GitHub Actions and moving away from the point and click approach of programming with R. This seems like a prime opportunity to put what I learned into practice!3",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Coming Up With a Project Idea</span>"
    ]
  },
  {
    "objectID": "intro.html#packages-youll-need",
    "href": "intro.html#packages-youll-need",
    "title": "1  Coming Up With a Project Idea",
    "section": "1.2 Packages You’ll Need",
    "text": "1.2 Packages You’ll Need\nBefore we get into it, you’ll need the following packages:\n\n### Don't forget about pak!\nif (!(\"pak\" %in% installed.packages())) {\n  install.packages(\"pak\")\n}\n\npak::pak(\"tidyverse\") ## I mean, you don't need the whole tidyverse, but it doesn't hurt. You could probably get away with dplyr, purrr, googlesheets4, and readr.\npak::pak(\"httr2\")\npak::pak(\"mapgl\")\npak::pak(\"gt\")\npak::pak(\"gtExtras\")\npak::pak(\"sf\")\npak::pak(\"logger\")\npak::pak(\"glue\")\npak::pak(\"bslib\")\npak::pak(\"fontawesome\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Coming Up With a Project Idea</span>"
    ]
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Coming Up With a Project Idea",
    "section": "",
    "text": "Or maybe you’re one of those 10x coders who writes really good code and you can’t relate to this point. To which I’ll say good for you and mask the pang of jealousy that’s clearly underlying my praise.↩︎\nThis analogy pretty much describes my entire career at this point. Hopefully I’ll get to the stage where I can make my own proverbial Lego brick.↩︎\nAnd maybe a worthy post scriptum, I met last year’s winner in an elevator at posit conf and she encouraged me to give it a shot. Evidently I’m one of those personality types where I act on the slightest bit of challenge/encouragement…↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Coming Up With a Project Idea</span>"
    ]
  },
  {
    "objectID": "data_sources.html",
    "href": "data_sources.html",
    "title": "2  Finding Data in the Real World",
    "section": "",
    "text": "2.1 Boxes and Their Pros and Cons\nYou’re probably a data scientist. A data analyst? A data-type person… so you’ll hopefully get me when I say that the foundation of data projects is, unsurprisingly, the data! Okay. In the context of flight data, there’s a whole bunch of sources and, uh, well, they’re not all super conducive to open-source.\nI like the analogy of boxes.1 Flight data, like a bunch of types of data, are served in nice boxes whose modern development stand-in is something like an API. An API is a nice way of letting you sift through someone’s data and pick out of the box what you like.\nThese flight data boxes are generally super nice. But super nice things are generally not cheap. So, in my case, it took some searching out in the world to identify some open-source boxes that are maintained by some very dedicated and praiseworthy people:\nA lot of that searching was going down a series of Google rabbit holes. Google’s implementation of LLMs into its search also sped up this process significantly, as I could ask Google in plain English for some examples of open-source APIs that provide flight data.\nEssentially, the data hookups for this project are as follows:\nThere may be a bunch of alluring boxes for your project. If you’re like me, you’ll continue along your project and notice that there’s something not-so-perfect about some of the boxes you’re pulling from. Documenting what boxes you pull from is important (point 1 from the preface), but why you pull from them is just as important; this means analyzing and writing down why you chose certain data sources to pull from.2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Finding Data in the Real World</span>"
    ]
  },
  {
    "objectID": "data_sources.html#boxes-and-their-pros-and-cons",
    "href": "data_sources.html#boxes-and-their-pros-and-cons",
    "title": "2  Finding Data in the Real World",
    "section": "",
    "text": "2.1.1 Trade-Off 1: API Credits and Claw Machines\nThere is a reason why FlightRadar24, FlightAware, Flighty, etc. charge for flight tracking services, and that free alternatives that you or I might use to check on a given flight are backed by big players like Google or Apple: reliable flight data at the scale that regular consumers demand it is not cheap. It’s generally backed by data brokers like OAG and Cirium, whose purpose (at least partially) is to maintain a proverbial box of good information.\nThe OpenSky network is an open-source alternative backed by contributors of aircraft (ADS-B, Mode-S, FLARM, VHF, all the alphabet soup) data. While it won’t provide all the data that the paid alternatives do (route data specifically, I’ll get to the challenges there in a moment), it provides a lot of value to the project, specifically the mapping component.\nNow, one trade-off you’ll get with some boxes is being charged a toll to look inside, that is, the usage of an API being capped by a number of credits. One reason to cap the number of times an API can be requested is because of, in economic philosophy/political philosophy/whatever knowledge field wants to claim credit here speak, the tragedy of the commons (among other reasons).3 Basically, whenever everyone has access to a shared resource, they end up overusing the resource. If everyone has access to a flight data API, too many people will try to query the API for every United Airlines flight in the world every 15 minutes.4 Hence the idea of limiting how many times someone can rummage around inside your box in a given period of time.\nFor OpenSky, the credit limit is 400 credits per day for unauthorized users, 4,000 a day for authorized users - the account is free! - and 8,000 a day for accounts that contribute data to the network.\nAfter all that exposition comes the challenge and the trade-off: when you query OpenSky, OpenSky doesn’t care if you queried an aircraft that’s currently on the ground. You’ll spend 4 credits regardless of whether you receive a track/state vector or not.5 It’s kind of like playing the claw machine game - you put in a quarter, you might get something, you might not. But it counts against your budget.\nThus, we’re at one of our major decision points with several considerations before us:\n\nWe can’t query the entire fleet due to the credit limit (we might be able to manage one pull a day, but the next bullet point exhibits why this is problematic).\nPlanes are constantly on the move, so there’s not much utility in displaying information that’s quickly outdated.\nHow do we actually get information from planes that are in the air?\n\nAfter some thinking, the solution I came up with was the following: take a random sample of United’s active mainline fleet (say, 10 aircraft) at a given time interval (say, 30 minutes), and query OpenSky for that random sample.\nThis approach has the following pros:\n\nProvides a different snapshot of the fleet throughout the day, giving users something new to look at every time they visit.\nOffers relatively up-to-date information about the aircraft selected, within the time interval (i.e., 30 minutes).\nDepending on the sample size, increases the likelihood that aircraft actually in the air are queried.\nFlights and time intervals can be optimized up to the rate limit (4,000 credits per day / 4 credits per pull = 1,000 aircraft per day / 24 hours in a day = 41 aircraft per hour).\n\nWith the following cons:\n\nThere’s still the possibility that no aircraft in the air will be pulled.\nDoesn’t track the same aircraft through time.\n\nTo me, this seems like a valid approach and generally satisfied my goals for the project. Will they necessarily satisfy your goals? Maybe not. They probably won’t satisfy the goals of every user base. The purpose of this section, though, is to illustrate working through the assumptions mentally as well as documenting them. Why? At posit::conf(2025), there was a lot of talk about work being reproducible. We can reproduce code. It’s often harder to reproduce mental models. But if we write them down, it makes it easier to go back and rework our project if we find that demand for these priorities (i.e., coverage vs. refresh rate) shifts over time.\n\n\n2.1.2 Trade-Off 2: Route Information\nSometimes you only recognize obstacles when you’re in the middle of development. That’s pretty much what happened to me when I was querying route data using the ADSBDB API. The ADSBDB API pulls route information from a database maintained by volunteer contributors. The problem is that operations staff at United Airlines change their minds quicker than volunteer contributors can keep up, so said route information often falls out of date. That’s fine, but it would be nice to mitigate this somehow. So I went back into the world and searched for an API with more information.\nI ended up finding adsb.lol’s API which provides similar route information, this time from a GitHub repo with (ostensibly) more regular updates than ADSBDB. One key element that this API included were two columns: origin_plausible and destination_plausible, two binary columns indicating whether a given origin and destination airport made sense in the context of a given aircraft’s activity. Despite this, the data still isn’t perfect.\nAs such, the trade-off is whether to omit data entirely due to lack of reliability. Sometimes route information is correct, sometimes it isn’t. Sometimes implausible route information is correct, and sometimes plausible route information is incorrect, making the errant information hard to isolate.\nLuckily, adsb.lol provided somewhat of an off-ramp to this concern: given the plausible columns, I can serve different versions of a table based on whether the route information is flagged as plausible or not. Given that even plausible information can still be incorrect, I’ll provide a disclaimer for that information as well. The technical implementation of this is demonstrated in Section 5.1.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Finding Data in the Real World</span>"
    ]
  },
  {
    "objectID": "data_sources.html#footnotes",
    "href": "data_sources.html#footnotes",
    "title": "2  Finding Data in the Real World",
    "section": "",
    "text": "My father, who is really good at analogies (and I like to hope that I inherited the gift a little), came up with this one, so let this citation serve as proof that I’m not plagiarizing.↩︎\nI’m speaking to myself here more than anything. I acknowledge the habit of thinking “I’ll document it later” - no you won’t. You’ll find a new package to learn about or some other way to procrastinate. Write the docs. Your future self or someone else will thank you. By the way, I fully acknowledge the limited power this footnote is going to have on changing behavior. One of those things about being easier said than done.↩︎\nIn computer science speak, I believe the analogous law is Cheng’s Law of Why We Can’t Have Nice Things.↩︎\nI can’t imagine anyone who would do such a thing.↩︎\nTo be fair, you do receive information that said plane is not in the air, so it technically is a data point.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Finding Data in the Real World</span>"
    ]
  },
  {
    "objectID": "get_data.html",
    "href": "get_data.html",
    "title": "3  Actually Getting Flight Data (feat. httr2)",
    "section": "",
    "text": "3.1 Interacting with APIs\nAlright, I’ve talked your ear off (typed your eyes off?) about the project background and the mental model framing my development approach. This section actually walks you through some code! For this section, we’ll be putting all of our code into an R script called support_functions.R\nThere are many methods of interacting with APIs, but for this project I’ll be using httr2. For a comprehensive rundown of httr2, nothing replaces the docs, but I’ll give a quick rundown of some overarching principles before we set up our data pipelines.\nA request in httr2 generally starts like this:\ninstall.packages(\"httr2\")\nlibrary(httr2)\n\nreq &lt;- request(\"https://some_example.com\")\n… where some_example.com is the base URL forming all API requests. For the OpenSky network, the root of the REST API is https://opensky-network.org/api, though you could also set up the request using a specific endpoint as the base_url as well, for example, https://opensky-network.org/api/states/all?\nThe next function following request() is usually what the request needs to pass to the API. In this project, I use the following request varieties:\nThese are chained together using the pipe operator like so:\nrequest(url) |&gt; req_url_query()\nWe then perform the request by chaining req_perform() onto it. Once we use req_perform(), our request is sent! But we still need to extract our data from the request. For that, we’ll use one of httr2’s functions starting with resp. In this project, I only use one type:\nFor the rest of this section, we’ll be building functions so we can send httr2 requests and get data back for our aircraft, thereby building the pipeline to supply our tables with new information updated at regular intervals throughout the day.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Actually Getting Flight Data (feat. httr2)</span>"
    ]
  },
  {
    "objectID": "get_data.html#sec-api",
    "href": "get_data.html#sec-api",
    "title": "3  Actually Getting Flight Data (feat. httr2)",
    "section": "",
    "text": "req_url_query(): forms API requests where the API roughly takes on the form of variable=value, i.e., https://opensky-network.org/api/states/all?icao24=abcdefg\nreq_url_path_append(): for when you simply need to append something to the end of the base URL, i.e., https://api.adsbdb.com/v0/n-number/\nreq_body_json(): for when you need to pass information in a JSON to an API\n\n\n\n\n\nresp_body_json(): returns the parsed JSON information from the httr2 response object\n\n\n\n3.1.1 Interacting with the ADSBDB API\nWe’ll start with the most straightforward API to work with: the ADSBDB API. The ADSBDB API doesn’t require any authentication and simply requires us to append some information onto a few base URLs. Among other things, the ADSBDB API allows us to switch between icao24 (or Mode-S) identification information and registration numbers, which is important for us to construct a list of aircraft from the United Fleet Google Sheet that we can check against the OpenSky API, since the OpenSky API only takes icao24 addresses.\nLet’s start by reading through the ADSBDB API documentation for going from registration values to icao24 values.\n\nOkay, so we’ve got the base URL, https://api.adsbdb.com/v0/, the endpoint, n_number/, and what we’ll query by, the registration, denoted by [N-NUMBER].\nTo keep it simple, we’ll just treat the URL up to n_number/ as the base URL when passing our url argument to request(). Since the registration number is simply appended to the base URL in this case, we’ll use req_url_path_append(). We will wrap our httr2 request in a function. Why? So we can programmatically use our HTTP request to the RESTful API across multiple aircraft using functions like map() later on. Let’s name the function something so we can easily remember what it does; maybe get_icao24_from_registration? And let’s call the variable we’re passing registration, since that’s what [N_NUMBER] serves as a stand-in for. Doing that gives us something like this:\n\nlibrary(httr2)\n\nget_icao24_from_registration &lt;- function(registration) {\n  icao24 &lt;- request(\"https://api.adsbdb.com/v0/n-number/\") |&gt;\n    req_url_path_append(registration) |&gt;\n    req_perform() |&gt;\n    resp_body_json()\n\n  return(icao24)\n}\n\nAlright, let’s try it on registration number N37502:\n\nget_icao24_from_registration(\"N37502\")\n\n$response\n[1] \"A448D1\"\n\n\nThis is a good start. But we might want the results to come out directly instead of being nested behind $response. We can change the return to return(icao24$response) to do that. We might also want to return the results in a tibble, so we can easily use the bind_rows() function from dplyr in combination with map() later to combine a bunch of results.\nIn order to use map(), we might also want to add some error handling to our function. Seeing that ADSBDB is being continuously updated to improve its coverage of registrations to icao24 values, there may be some gaps in the data, causing the function to error out if we input a registration that hasn’t been included in the database. There are several methods to deal with this, including the use of possibly() and safely(), though I chose to use tryCatch() in combination with the logger package to emit an error log.\nLet’s put all these suggestions into practice. First, we’ll add the ability to export the result we want, icao24$response, as a tibble.\n\nget_icao24_from_registration &lt;- function(registration, return_tibble = TRUE) {\n  icao24 &lt;- request(\"https://api.adsbdb.com/v0/n-number/\") |&gt;\n    req_url_path_append(registration) |&gt;\n    req_perform() |&gt;\n    resp_body_json()\n\n  if (return_tibble) {\n    return(as_tibble(icao24$response) |&gt; rename(icao24 = value))\n  } else {\n    return(icao24$response)\n  }\n}\n\nNext, we’ll wrap that in tryCatch(), emitting a log_error() whenever icao24 information isn’t found on a given registration.\n\nlibrary(logger)\n\nget_icao24_from_registration &lt;- function(registration, return_tibble = TRUE) {\n  tryCatch(\n    {\n      icao24 &lt;- request(\"https://api.adsbdb.com/v0/n-number/\") |&gt;\n        req_url_path_append(registration) |&gt;\n        req_perform() |&gt;\n        resp_body_json()\n\n      if (return_tibble) {\n        return(as_tibble(icao24$response) |&gt; rename(icao24 = value))\n      } else {\n        return(icao24$response)\n      }\n    },\n    error = function(e) {\n      log_error(\"No icao24 information found for registration {registration}\")\n      return(NULL)\n    }\n  )\n}\n\nAnd now we’ll try outputting the result again:\n\nget_icao24_from_registration(\"N37502\", return_tibble = FALSE)\n\n[1] \"A448D1\"\n\n\nVoila!\nI think it’s useful to note things that I’d do differently if I had to do this again from scratch (now that I’m typing up this documentation after the fact). One thing I’d change is the error function in tryCatch(). Reason being that I’m making a pretty substantial assumption here about the nature of the error, i.e., that the icao24/mode-S value doesn’t exist, whereas the source of the error might be something different.\nAs such, I’d recommend doing something like this:\n\nlibrary(logger)\n\nget_icao24_from_registration &lt;- function(registration, return_tibble = TRUE) {\n  tryCatch(\n    {\n      icao24 &lt;- request(\"https://api.adsbdb.com/v0/n-number/\") |&gt;\n        req_url_path_append(registration) |&gt;\n        req_perform() |&gt;\n        resp_body_json()\n\n      if (return_tibble) {\n        return(as_tibble(icao24$response) |&gt; rename(icao24 = value))\n      } else {\n        return(icao24$response)\n      }\n    },\n    error = function(e) {\n      log_error(\"{registration} encountered error {e}\")\n      return(NULL)\n    }\n  )\n}\n\nget_icao24_from_registration(\"not a real registration\", return_tibble = FALSE)\n\nNULL\n\n\n… which returns NULL as seen above, but also prints this message to the console:\nERROR [2025-09-30 20:03:09] not a real registration encountered error Error in `req_perform()`:\n! HTTP 400 Bad Request.\n… and, in fact, I’ve gone back and made sure {e} is included in my log_error() calls where appropriate.\nWe might also want a reverse function that allows us to move from icao24 numbers to registration numbers. That’s fairly easy, all we have to do is create a new function with a base URL hitting the endpoint mode_s and swap registration for icao24. That looks like so:\n\nget_registration_from_icao24 &lt;- function(icao24, return_tibble = TRUE) {\n  tryCatch(\n    {\n      registration &lt;- request(\"https://api.adsbdb.com/v0/mode-s/\") |&gt;\n        req_url_path_append(icao24) |&gt;\n        req_perform() |&gt;\n        resp_body_json()\n\n      if (return_tibble) {\n        return(as_tibble(registration$response) |&gt; rename(registration = value))\n      } else {\n        return(registration$response)\n      }\n    },\n    error = function(e) {\n      log_error(\"{icao24} encountered error {e}\")\n      return(NULL)\n    }\n  )\n}\n\nI’m storing these functions in a file called support_functions.R which I’ll call later in my other scripts, just to keep them in a separate, single source of truth.\n\n\n3.1.2 Interacting with the adsb.lol API\nThe adsb.lol is a little trickier but still fairly friendly. Instead of req_url_path_append(), we’ve got to use req_body_json(), since the adsb.lol’s routeset endpoint only accepts requests formatted as JSON. Here’s the schema from the docs:\n{\n  \"planes\": [\n    {\n      \"callsign\": \"string\",\n      \"lat\": 0,\n      \"lng\": 0\n    }\n  ]\n}\nOkay, a little daunting if you’re not used to working with JSON - speaking for myself here! Luckily LLMs were a good tool that helped me tease this out. To prepare an R object for representation as JSON, we generally use list(). Likely an oversimplifcation, but in this case, each set of braces {} and brackets [] roughly represents where we need to include list(). Using that rule, our JSON setup should look like this:\n\njson &lt;- list(\n  planes = list(list(callsign = callsign, lat = 0, lng = 0))\n)\n\n… where callsign is going to be the variable we use in a function. lat and lon are optional latitude and longitude parameters we won’t concern ourselves with for the time being.\nAlright, so putting that together with what we’ve learned from working with ADSBDB, all we need to do is replace req_url_path_append() with req_body_json() and we should be good to go. Let’s call this one get_route_information.\n\nget_route_information &lt;- function(callsign) {\n  json &lt;- list(\n    planes = list(list(callsign = callsign, lat = 0, lng = 0))\n  )\n\n  route &lt;- request(\"https://api.adsb.lol/api/0/routeset/\") |&gt;\n    req_body_json(json) |&gt;\n    req_perform() |&gt;\n    resp_body_json()\n\n  return(route)\n}\n\n… and let’s try it with a random aircraft I pulled from the dashboard, N12003 operating as UAL881:\n\nget_route_information(\"UAL881\")\n\n[[1]]\n[[1]]$`_airport_codes_iata`\n[1] \"ORD-HND\"\n\n[[1]]$`_airports`\n[[1]]$`_airports`[[1]]\n[[1]]$`_airports`[[1]]$alt_feet\n[1] 672\n\n[[1]]$`_airports`[[1]]$alt_meters\n[1] 204.83\n\n[[1]]$`_airports`[[1]]$countryiso2\n[1] \"US\"\n\n[[1]]$`_airports`[[1]]$iata\n[1] \"ORD\"\n\n[[1]]$`_airports`[[1]]$icao\n[1] \"KORD\"\n\n[[1]]$`_airports`[[1]]$lat\n[1] 41.9786\n\n[[1]]$`_airports`[[1]]$location\n[1] \"Chicago\"\n\n[[1]]$`_airports`[[1]]$lon\n[1] -87.9048\n\n[[1]]$`_airports`[[1]]$name\n[1] \"Chicago O'Hare International Airport\"\n\n\n[[1]]$`_airports`[[2]]\n[[1]]$`_airports`[[2]]$alt_feet\n[1] 35\n\n[[1]]$`_airports`[[2]]$alt_meters\n[1] 10.67\n\n[[1]]$`_airports`[[2]]$countryiso2\n[1] \"JP\"\n\n[[1]]$`_airports`[[2]]$iata\n[1] \"HND\"\n\n[[1]]$`_airports`[[2]]$icao\n[1] \"RJTT\"\n\n[[1]]$`_airports`[[2]]$lat\n[1] 35.5523\n\n[[1]]$`_airports`[[2]]$location\n[1] \"Tokyo\"\n\n[[1]]$`_airports`[[2]]$lon\n[1] 139.78\n\n[[1]]$`_airports`[[2]]$name\n[1] \"Tokyo-Haneda International Airport\"\n\n\n\n[[1]]$airline_code\n[1] \"UAL\"\n\n[[1]]$airport_codes\n[1] \"KORD-RJTT\"\n\n[[1]]$callsign\n[1] \"UAL881\"\n\n[[1]]$number\n[1] \"881\"\n\n[[1]]$plausible\n[1] 0\n\n\nYeah, that doesn’t look very tidy. Well, they do say that most of data work is cleaning. Let’s see if we can massage this a bit. Looks like everything is stored under [[1]], so let’s get route[[1]] and try putting it into a tibble.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.1     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(glue)\n\nget_route_information &lt;- function(callsign) {\n  json &lt;- list(\n    planes = list(list(callsign = callsign, lat = 0, lng = 0))\n  )\n\n  route &lt;- request(\"https://api.adsb.lol/api/0/routeset/\") |&gt;\n    req_body_json(json) |&gt;\n    req_perform() |&gt;\n    resp_body_json()\n\n  route &lt;- route[[1]] |&gt; as_tibble()\n\n  return(route)\n}\n\nget_route_information(\"UAL881\")\n\n# A tibble: 2 × 7\n  `_airport_codes_iata` `_airports`  airline_code airport_codes callsign number\n  &lt;chr&gt;                 &lt;list&gt;       &lt;chr&gt;        &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt; \n1 ORD-HND               &lt;named list&gt; UAL          KORD-RJTT     UAL881   881   \n2 ORD-HND               &lt;named list&gt; UAL          KORD-RJTT     UAL881   881   \n# ℹ 1 more variable: plausible &lt;int&gt;\n\n\nBetter. But the shape isn’t entirely correct. If we think a little bit farther ahead to how the other data might look, we want one observation, i.e., one row, per plane. We’ve got two rows here, one for each airport it looks like. In fact, sometimes this API will return a multi-leg route - i.e., three rows or more! These routes are generally more common for point-to-point airlines like Southwest than they are with hub-and-spoke airlines like United. For now, to deal with these uncertain cases, we’ll plan on stopping the function entirely if there’s more than two rows returned by route.\n\n\n\n\n\n\nIn the future, one improvement would be to take the tracks provided by OpenSky and infer the departure airport based on spatial proximity using a spatial dataset of airports.\n\n\n\nFor now, we’ll focus on two-leg routes. After grabbing route[[1]], we need to pull apart the first row (origin) and second row (destination). We’ve also got to do something about these named lists sitting under the `_airports` column. Let’s try using unnest_wider(), separating the names with an underscore. We’re also going to try and bring these columns back together in a single row, so we’ve got to name them something different from one another. Let’s append origin_ to all columns in the object for the first row, and destination_ to all columns in the object for the second row. Then, let’s bind the columns using bind_cols().\n\nget_route_information &lt;- function(callsign) {\n  json &lt;- list(\n    planes = list(list(callsign = callsign, lat = 0, lng = 0))\n  )\n\n  route &lt;- request(\"https://api.adsb.lol/api/0/routeset/\") |&gt;\n    req_body_json(json) |&gt;\n    req_perform() |&gt;\n    resp_body_json()\n\n  route &lt;- route[[1]] |&gt; as_tibble()\n  if (nrow(route) &gt; 2) {\n    stop(\n      \"Callsign has multiple routes or a multi-leg route. Unable to determine routing.\"\n    )\n  }\n  route_origin &lt;- route[1, ] |&gt;\n    unnest_wider(`_airports`, names_sep = \"_\") |&gt;\n    rename_all(~ glue(\"origin_{.x}\"))\n  route_destination &lt;- route[2, ] |&gt;\n    unnest_wider(`_airports`, names_sep = \"_\") |&gt;\n    rename_all(~ glue(\"destination_{.x}\"))\n\n  route &lt;- bind_cols(route_origin, route_destination)\n\n  return(route_origin)\n}\n\nget_route_information(\"UAL881\")\n\n# A tibble: 1 × 15\n  origin__airport_codes_iata origin__airports_alt_feet origin__airports_alt_me…¹\n  &lt;chr&gt;                                          &lt;dbl&gt;                     &lt;dbl&gt;\n1 ORD-HND                                          672                      205.\n# ℹ abbreviated name: ¹​origin__airports_alt_meters\n# ℹ 12 more variables: origin__airports_countryiso2 &lt;chr&gt;,\n#   origin__airports_iata &lt;chr&gt;, origin__airports_icao &lt;chr&gt;,\n#   origin__airports_lat &lt;dbl&gt;, origin__airports_location &lt;chr&gt;,\n#   origin__airports_lon &lt;dbl&gt;, origin__airports_name &lt;chr&gt;,\n#   origin_airline_code &lt;chr&gt;, origin_airport_codes &lt;chr&gt;,\n#   origin_callsign &lt;chr&gt;, origin_number &lt;chr&gt;, origin_plausible &lt;int&gt;\n\n\nAlright, just a few more things to take care of. Some of these columns now have a double underscore. Additionally, we don’t have the callsign info anywhere in this tibble, so we’ll need to mutate that in using mutate(callsign = callsign). Let’s also add some error handling similar to the other functions, where an error returns a tibble in a similar schema filled with NAs, parsed down to only the columns used by table creation functions later in the project.\n\nget_route_information &lt;- function(callsign) {\n  tryCatch(\n    {\n      json &lt;- list(\n        planes = list(list(callsign = callsign, lat = 0, lng = 0))\n      )\n\n      route &lt;- request(\"https://api.adsb.lol/api/0/routeset/\") |&gt;\n        req_body_json(json) |&gt;\n        req_perform() |&gt;\n        resp_body_json()\n\n      route &lt;- route[[1]] |&gt; as_tibble()\n      if (nrow(route) &gt; 2) {\n        stop(\n          \"Callsign has multiple routes or a multi-leg route. Unable to determine routing.\"\n        )\n      }\n      route_origin &lt;- route[1, ] |&gt;\n        unnest_wider(`_airports`, names_sep = \"_\") |&gt;\n        rename_all(~ glue(\"origin_{.x}\"))\n      route_destination &lt;- route[2, ] |&gt;\n        unnest_wider(`_airports`, names_sep = \"_\") |&gt;\n        rename_all(~ glue(\"destination_{.x}\"))\n\n      route &lt;- bind_cols(route_origin, route_destination) |&gt;\n        rename_all(~ str_replace_all(.x, \"__\", \"_\")) |&gt;\n        mutate(callsign = callsign)\n\n      return(route)\n    },\n    error = function(e) {\n      log_error(\"Error getting route info for {callsign} {e}\")\n      route &lt;- tibble(\n        callsign = callsign,\n        origin_airports_iata = NA,\n        origin_airports_name = NA,\n        origin_airports_countryiso2 = NA,\n        origin_plausible = NA,\n        destination_airports_iata = NA,\n        destination_airports_name = NA,\n        destination_airports_countryiso2 = NA,\n        destination_plausible = NA,\n      )\n      return(route)\n    }\n  )\n}\n\nget_route_information(\"UAL881\")\n\n# A tibble: 1 × 31\n  origin_airport_codes_iata origin_airports_alt_feet origin_airports_alt_meters\n  &lt;chr&gt;                                        &lt;dbl&gt;                      &lt;dbl&gt;\n1 ORD-HND                                        672                       205.\n# ℹ 28 more variables: origin_airports_countryiso2 &lt;chr&gt;,\n#   origin_airports_iata &lt;chr&gt;, origin_airports_icao &lt;chr&gt;,\n#   origin_airports_lat &lt;dbl&gt;, origin_airports_location &lt;chr&gt;,\n#   origin_airports_lon &lt;dbl&gt;, origin_airports_name &lt;chr&gt;,\n#   origin_airline_code &lt;chr&gt;, origin_airport_codes &lt;chr&gt;,\n#   origin_callsign &lt;chr&gt;, origin_number &lt;chr&gt;, origin_plausible &lt;int&gt;,\n#   destination_airport_codes_iata &lt;chr&gt;, …\n\n\nAnd here’s our final product!\n\n\n3.1.3 Interacting with the OpenSky API\nEven though I’ve listed the OpenSky API last, it isn’t really that daunting beyond authorizing your credentials. The authorization piece adds a little extra bit of complexity, but nothing we can’t handle. As alluded to in Section 2.1.1, the OpenSky API uses API credits as a way to deal with demand (among other things). For non-registered users, the limit is 400 credits a day, which roughly comes out to about 100 flights a day. That’s not very much. Luckily, with a simple and free registration, we can get ourselves up to 4,000 credits a day, or 1,000 flights a day instead!\n\n3.1.3.1 Interacting as an Unauthenticated User\nI’ll cover the unauthenticated piece first and provide more details about authentication in the next section. We might as well use up the 400 credits we get as an unauthorized user on messing around and actually getting our functions to work, since the 400 and 4,000 are separate limits.\nWe want both track and state vector data for a given aircraft, defined by an icao24 address. The base URLs for those endpoints are https://opensky-network.org/api/states/all? and https://opensky-network.org/api/tracks/all?. Let’s start with the track information first. Taking a look at the docs:\n\nWe can see that our request needs to at least pass the property icao24. Time is optional, if we had information on when we thought the given icao24 code was in the air (i.e., a time between the start and end of a given flight). Since we don’t have that information, we’ll just pass the icao24 code in our request. To do that, we’ll use req_url_query(), which is structured in a variable = value pattern, and call this function get_flight_track.\n\nget_flight_track &lt;- function(icao24, as_sf = TRUE) {\n  opensky_response &lt;- request(\"https://opensky-network.org/api/tracks/all?\") |&gt;\n    req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n    req_perform()\n}\n\nThis is the basic body of our request. Note the str_to_lower() wrapping icao24. The OpenSky API only accepts lower case icao24 addresses. To make life a little easier, I added str_to_lower() as a failsafe to make sure the request doesn’t fail because of a malformed icao24 address. Before we include the code to actually get the response, we should probably add something here that we haven’t added to our previous functions, which is a way to tell how many credits we have left. For the OpenSky API, this is contained in the response header \"X-Rate-Limit-Remaining\". We’ll grab that information and output it to the console using log_info().\n\nget_flight_track &lt;- function(icao24, as_sf = TRUE) {\n  opensky_response &lt;- request(\"https://opensky-network.org/api/tracks/all?\") |&gt;\n    req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n    req_perform()\n\n  check_remaining_credits &lt;- opensky_response |&gt;\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n}\n\n… and now we’ll add the code to actually get the response:\n\nget_flight_track &lt;- function(icao24, as_sf = TRUE) {\n  opensky_response &lt;- request(\"https://opensky-network.org/api/tracks/all?\") |&gt;\n    req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n    req_perform()\n\n  check_remaining_credits &lt;- opensky_response |&gt;\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track &lt;- opensky_response |&gt;\n    resp_body_json() |&gt;\n    as_tibble()\n\n  return(flight_track)\n}\n\nWhat do we get? Well, depending on what time of day you run this, you might get a result, or you might not. So, for the purposes of this tutorial, I’m going to cheat a little bit, find an active flight, capture it, and store it to a CSV.\n\n# flight_track &lt;- get_flight_track(\"A126CC\")\n# write_csv(flight_track, \"data/flight_track.csv\")\n\nread_csv(\"data/flight_track.csv\")\n\nRows: 60 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): icao24, callsign\ndbl (2): startTime, endTime\nlgl (1): path\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 60 × 5\n   icao24 callsign  startTime    endTime path \n   &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt; &lt;lgl&gt;\n 1 a126cc UAL2353  1759356477 1759359956 NA   \n 2 a126cc UAL2353  1759356477 1759359956 NA   \n 3 a126cc UAL2353  1759356477 1759359956 NA   \n 4 a126cc UAL2353  1759356477 1759359956 NA   \n 5 a126cc UAL2353  1759356477 1759359956 NA   \n 6 a126cc UAL2353  1759356477 1759359956 NA   \n 7 a126cc UAL2353  1759356477 1759359956 NA   \n 8 a126cc UAL2353  1759356477 1759359956 NA   \n 9 a126cc UAL2353  1759356477 1759359956 NA   \n10 a126cc UAL2353  1759356477 1759359956 NA   \n# ℹ 50 more rows\n\n\nAlright, a few things to note here. One, even though path claims to be of type &lt;lgl&gt; and is full of NA values, that’s because path actually comes through as a list-column. So we’ll need to do that unnesting procedure that we’ve done many times before:\n\nget_flight_track &lt;- function(icao24, as_sf = TRUE) {\n  opensky_response &lt;- request(\"https://opensky-network.org/api/tracks/all?\") |&gt;\n    req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n    req_perform()\n\n  check_remaining_credits &lt;- opensky_response |&gt;\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track &lt;- opensky_response |&gt;\n    resp_body_json() |&gt;\n    as_tibble() |&gt;\n    unnest_wider(col = path, names_sep = \"_\")\n\n  return(flight_track)\n}\n\n\n# flight_track &lt;- get_flight_track(\"A126CC\")\n# write_csv(flight_track, \"data/flight_track_2.csv\")\n\nread_csv(\"data/flight_track_2.csv\")\n\nRows: 60 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): icao24, callsign\ndbl (7): startTime, endTime, path_1, path_2, path_3, path_4, path_5\nlgl (1): path_6\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 60 × 10\n   icao24 callsign  startTime  endTime path_1 path_2 path_3 path_4 path_5 path_6\n   &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;lgl&gt; \n 1 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    142 FALSE \n 2 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    131 FALSE \n 3 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    124 FALSE \n 4 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    122 FALSE \n 5 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    121 FALSE \n 6 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    609    123 FALSE \n 7 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    609    124 FALSE \n 8 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.2    914    126 FALSE \n 9 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.2   1219    125 FALSE \n10 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.8  -95.2   1524    124 FALSE \n# ℹ 50 more rows\n\n\nOkay. Unlike the adsb.lol API response which returns named lists, the OpenSky API returns an unnamed list that we have to unnest. This means we get less descriptive column names when we run unnest_wider(), since we’re lacking the metadata that a named list gives us, hence the path_1, path_2, path_n schema. Luckily, if we take a look at the OpenSky API documents again, each property of the JSON response is documented by index.\n\nR is a one-based indexed language, so shift every value of the index in that table by 1. Doing that, we can rename our columns by including this bit of code:\n\nrename(\n  timestamp = path_1,\n  latitude = path_2,\n  longitude = path_3,\n  baro_altitude = path_4,\n  true_track = path_5,\n  on_ground = path_6\n)\n\nThe columns startTime, endTime, and timestamp are currently long numeric strings, because they represent Unix time: a running total of seconds since January 1, 1970, midnight UTC. I’m not sure about the merits of using Unix timestamp, and I won’t go down that rabbit hole right now, but I’ll extend you the courtesy of linking the Wikipedia article on Unix time if you’re so inclined. lubridate’s got a function, as_datetime(), that helps us convert Unix timestamps into something more intelligible. We’ll mutate across all the time columns to convert them into human (and machine) readable timestamps.\n\nget_flight_track &lt;- function(icao24) {\n  opensky_response &lt;- request(\"https://opensky-network.org/api/tracks/all?\") |&gt;\n    req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n    req_perform()\n\n  check_remaining_credits &lt;- opensky_response |&gt;\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track &lt;- opensky_response |&gt;\n    resp_body_json() |&gt;\n    as_tibble() |&gt;\n    unnest_wider(col = path, names_sep = \"_\") |&gt;\n    rename(\n      timestamp = path_1,\n      latitude = path_2,\n      longitude = path_3,\n      baro_altitude = path_4,\n      true_track = path_5,\n      on_ground = path_6\n    ) |&gt;\n    mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |&gt;\n    mutate(callsign = trimws(callsign)) |&gt;\n    arrange(timestamp)\n\n  return(flight_track)\n}\n\nFinally, we’re dealing with geospatial data here. This data has a bunch of rows, and that’s because it has a bunch of different coordinates throughout time. For present purposes, we really just want the complete picture of an aircraft’s flight path up until the point in time we pulled its data. So let’s summarize the data, convert it to a simple features dataframe, and cast it to \"LINESTRING\". We’ll do that by using st_as_sf() to convert the data to a simple features dataframe, specifying coords = c(\"longitude\", \"latitude\", \"baro_altitude\") as the X, Y, and Z (height) dimensions of our data. We can specify dim = \"XYZ\", though the default of this function already captures this, so it can be omitted. Finally, we need to define the projection system. The World Geodetic System, WGS, and its current version, 84, is the standard, hence we’ll specify 4326 for WGS84.\n\nlibrary(sf)\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE\n\nget_flight_track &lt;- function(icao24, as_sf = TRUE) {\n  opensky_response &lt;- request(\"https://opensky-network.org/api/tracks/all?\") |&gt;\n    req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n    req_perform()\n\n  check_remaining_credits &lt;- opensky_response |&gt;\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track &lt;- opensky_response |&gt;\n    resp_body_json() |&gt;\n    as_tibble() |&gt;\n    unnest_wider(col = path, names_sep = \"_\") |&gt;\n    rename(\n      timestamp = path_1,\n      latitude = path_2,\n      longitude = path_3,\n      baro_altitude = path_4,\n      true_track = path_5,\n      on_ground = path_6\n    ) |&gt;\n    mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |&gt;\n    mutate(callsign = trimws(callsign)) |&gt;\n    arrange(timestamp)\n\n  if (as_sf) {\n    flight_track &lt;- st_as_sf(\n      flight_track,\n      coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n      dim = \"XYZ\",\n      crs = 4326\n    ) |&gt;\n      group_by(icao24, callsign) |&gt;\n      summarize(do_union = FALSE) |&gt;\n      st_cast(\"LINESTRING\") |&gt;\n      st_wrap_dateline()\n  }\n  return(flight_track)\n}\n\nEasy, right? Well, easier than me trying to figure out why on Earth I was getting weird lines for the longest time. I’ll draw special attention to two things here:\n\nsummarize(do_union = FALSE): prevents sf from trying to union all the geometries (in this case, points) together when summarizing. If you fail to specify this argument, what you get is a weird connection of lines rather than a flight track.\nst_wrap_dateline(): If you’ve ever mapped anything in the Pacific Ocean, you’ll probably be painfully aware that computers seem to have a tough time with the international date line.1 The date line causes a discontinuity in the coordinate system, particularly on the WGS84 projection. Interactive maps generally solve this issue, but, again, if you’re projecting data using WGS84, the coordinate system will have a discontinuity, and so sf will, rightfully, wrap your line around the other side of the world to make a valid, continuous geometry. st_wrap_dateline() solves this problem by detecting geometry that crosses the international date line, splitting it, and casting to \"MULTILINESTRING\".\n\nI mentioned above as well as in Section 2.1.1 that this function will fail and consume credits if the queried icao24 address is not actually in flight at the moment. Let’s add error handling for that similar to our other functions:\n\nget_flight_track &lt;- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response &lt;- request(\n        \"https://opensky-network.org/api/tracks/all?\"\n      ) |&gt;\n        req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n        req_perform()\n\n      check_remaining_credits &lt;- opensky_response |&gt;\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_track &lt;- opensky_response |&gt;\n        resp_body_json() |&gt;\n        as_tibble() |&gt;\n        unnest_wider(col = path, names_sep = \"_\") |&gt;\n        rename(\n          timestamp = path_1,\n          latitude = path_2,\n          longitude = path_3,\n          baro_altitude = path_4,\n          true_track = path_5,\n          on_ground = path_6\n        ) |&gt;\n        mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |&gt;\n        mutate(callsign = trimws(callsign)) |&gt;\n        arrange(timestamp)\n\n      if (as_sf) {\n        flight_track &lt;- st_as_sf(\n          flight_track,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        ) |&gt;\n          group_by(icao24, callsign) |&gt;\n          summarize(do_union = FALSE) |&gt;\n          st_cast(\"LINESTRING\") |&gt;\n          st_wrap_dateline()\n      }\n      return(flight_track)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving flight track for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position &lt;- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n\nIf the function doesn’t return any data, it could very well be the case that the aircraft associated with the icao24 address is inactive (on the ground) at the moment. For actually valid icao24 values, it seems fair to return a tibble with the icao24 value and a status of TRUE for on_ground. If we were to build this out further, we’d probably want to add some validation to the user’s icao24 input.\n\n\n\n\n\n\nThe way I’ve handled the errors here is anticipation of using map() on this function, and this isn’t the only way, or maybe even the best way, to achieve this goal. One could use possibly() or safely() as alternatives which will move past errors when applying this function against a vector. But, for present purposes, this is what I’ve went with.\n\n\n\nOkay, let’s do the same thing for state vectors. A lot of this is going to be similar so I’m going to move substantially quicker through this one. The base URL this time is https://opensky-network.org/api/states/all?, the arguments we need to pass (icao24) are the same, and we’ve got a whole bunch more return values. Spoiler: we’ll need to unnest, rename, coerce Unix values, and convert to simple features like last time. What’s different this time is that we’ve got a callsign column with some whitespace in it. We’ll deal with the whitespace using mutate(callsign = trimws(callsign)) to get rid of it. We’ll call this function get_state_vector.\n\n\nget_state_vector &lt;- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response &lt;- request(\n        \"https://opensky-network.org/api/states/all?\"\n      ) |&gt;\n        req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n        req_perform()\n\n      check_remaining_credits &lt;- opensky_response |&gt;\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_position &lt;- opensky_response |&gt;\n        resp_body_json() |&gt;\n        as_tibble() |&gt;\n        unnest_wider(col = states, names_sep = \"_\") |&gt;\n        rename(\n          icao24 = states_1,\n          callsign = states_2,\n          origin_country = states_3,\n          time_position = states_4,\n          last_contact = states_5,\n          longitude = states_6,\n          latitude = states_7,\n          baro_altitude = states_8,\n          on_ground = states_9,\n          velocity = states_10,\n          true_track = states_11,\n          vertical_rate = states_12,\n          sensors = states_13,\n          geo_altitude = states_14,\n          squawk = states_15,\n          special_purpose = states_16,\n          position_source = states_17\n        ) |&gt;\n        mutate(callsign = trimws(callsign)) |&gt;\n        mutate(across(c(time, time_position, last_contact), \\(x) {\n          as_datetime(x)\n        }))\n\n      if (as_sf) {\n        flight_position &lt;- st_as_sf(\n          flight_position,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        )\n      }\n\n      return(flight_position)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving state vector for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position &lt;- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n\nLet’s save this data for later using a geoparquet file.\n\nlibrary(sfarrow)\n\n# st_write_parquet(get_flight_track(\"A126CC\"), \"data/flight_track.parquet\")\n# st_write_parquet(get_state_vector(\"A126CC\"), \"data/state_vector.parquet\")\n\nst_read_parquet(\"data/flight_track.parquet\")\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: LINESTRING\nDimension:     XYZ\nBounding box:  xmin: -95.3315 ymin: 28.0255 xmax: -87.0249 ymax: 29.9453\nz_range:       zmin: 304 zmax: 10668\nGeodetic CRS:  WGS 84\n  icao24 callsign                       geometry\n1 a126cc  UAL2353 LINESTRING Z (-95.3315 29.9...\n\nst_read_parquet(\"data/state_vector.parquet\")\n\nSimple feature collection with 1 feature and 15 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: -87.0249 ymin: 28.0255 xmax: -87.0249 ymax: 28.0255\nz_range:       zmin: 10668 zmax: 10668\nGeodetic CRS:  WGS 84\n                 time icao24 callsign origin_country       time_position\n1 2025-10-01 23:05:56 a126cc  UAL2353  United States 2025-10-01 23:05:56\n         last_contact on_ground velocity true_track vertical_rate sensors\n1 2025-10-01 23:05:56     FALSE   267.79     112.48             0      NA\n  geo_altitude squawk special_purpose position_source\n1     11254.74     NA           FALSE               0\n                        geometry\n1 POINT Z (-87.0249 28.0255 1...\n\n\n\n\n3.1.3.2 Interacting as an Authenticated User\nIf we want to up our credit limit from 400 to 4,000 we’ll need to register with OpenSky. You can do that by clicking sign in here. Once you create an account, you’ll see a box on the right-hand sign of your screen to issue credentials. Your credentials will come in the form of a JSON file called credentials.json.\nOpenSky uses an OAuth2 client credentials flow to authenticate requests to the API. All you need to know about that at the moment is httr2 has a fairly straightforward way to deal with this. First, we’ll need to define our oauth_client:\n\nclient1 &lt;-\n  oauth_client(\n    id = Sys.getenv(\"OPENSKY_CLIENT_ID\"),\n    token_url = \"https://auth.opensky-network.org/auth/realms/opensky-network/protocol/openid-connect/token\",\n    secret = Sys.getenv(\"OPENSKY_CLIENT_SECRET\"),\n    auth = \"header\"\n  )\n\n… where token_url is where we get our token from, id is the ID in our credential.json file we got from OpenSky, and secret is the secret in our credential.json file.\nI use Sys.getenv() here for reasons I’ll get into in Section 6.2. You can use the keyring package and httr2 has some built-in functions for you to use as well. But for now, let’s use Sys.getenv().\nAs Hadley Wickham writes in the secrets portion of the httr2 documentation:\n\nWhile you can manage the key explicitly in a variable, it’s much easier to store in an environment variable. In real life, you should NEVER use Sys.setenv() to create this env var because you will also store the secret in your .Rhistory. Instead add it to your .Renviron using usethis::edit_r_environ() or similar.\n\nAdd this to your .Renviron file:\nOPENSKY_CLIENT_ID=\"{your_id}\"\nOPENSKY_CLIENT_SECRET=\"{your_secret}\"\nFor example:\nOPENSKY_CLIENT_ID=\"youropenskyid@whatever_this_domain_was_probably_openskyapi.com\"\nOPENSKY_CLIENT_SECRET=\"imnotputtingarealsecretinhereasanexamplewejustmetmaybegettoknowmealittlemorefirst\"\nAfter you’ve done that and defined client1 somewhere in your script (you can also define it within the functions below), we’ll modify our OpenSky functions slightly by adding one line: req_oauth_client_credentials(client1) |&gt;\n\nclient1 &lt;-\n  oauth_client(\n    id = Sys.getenv(\"OPENSKY_CLIENT_ID\"),\n    token_url = \"https://auth.opensky-network.org/auth/realms/opensky-network/protocol/openid-connect/token\",\n    secret = Sys.getenv(\"OPENSKY_CLIENT_SECRET\"),\n    auth = \"header\"\n  )\n\n# The line we're adding:\n# req_oauth_client_credentials(client1) |&gt;\n\nget_flight_track &lt;- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response &lt;- request(\n        \"https://opensky-network.org/api/tracks/all?\"\n      ) |&gt;\n        req_oauth_client_credentials(client1) |&gt;\n        req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n        req_perform()\n\n      check_remaining_credits &lt;- opensky_response |&gt;\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_track &lt;- opensky_response |&gt;\n        resp_body_json() |&gt;\n        as_tibble() |&gt;\n        unnest_wider(col = path, names_sep = \"_\") |&gt;\n        rename(\n          timestamp = path_1,\n          latitude = path_2,\n          longitude = path_3,\n          baro_altitude = path_4,\n          true_track = path_5,\n          on_ground = path_6\n        ) |&gt;\n        mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |&gt;\n        mutate(callsign = trimws(callsign)) |&gt;\n        arrange(timestamp)\n\n      if (as_sf) {\n        flight_track &lt;- st_as_sf(\n          flight_track,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        ) |&gt;\n          group_by(icao24, callsign) |&gt;\n          summarize(do_union = FALSE) |&gt;\n          st_cast(\"LINESTRING\") |&gt;\n          st_wrap_dateline()\n      }\n      return(flight_track)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving flight track for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position &lt;- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n\nget_state_vector &lt;- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response &lt;- request(\n        \"https://opensky-network.org/api/states/all?\"\n      ) |&gt;\n        req_oauth_client_credentials(client1) |&gt;\n        req_url_query(icao24 = str_to_lower(icao24)) |&gt;\n        req_perform()\n\n      check_remaining_credits &lt;- opensky_response |&gt;\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_position &lt;- opensky_response |&gt;\n        resp_body_json() |&gt;\n        as_tibble() |&gt;\n        unnest_wider(col = states, names_sep = \"_\") |&gt;\n        rename(\n          icao24 = states_1,\n          callsign = states_2,\n          origin_country = states_3,\n          time_position = states_4,\n          last_contact = states_5,\n          longitude = states_6,\n          latitude = states_7,\n          baro_altitude = states_8,\n          on_ground = states_9,\n          velocity = states_10,\n          true_track = states_11,\n          vertical_rate = states_12,\n          sensors = states_13,\n          geo_altitude = states_14,\n          squawk = states_15,\n          special_purpose = states_16,\n          position_source = states_17\n        ) |&gt;\n        mutate(callsign = trimws(callsign)) |&gt;\n        mutate(across(c(time, time_position, last_contact), \\(x) {\n          as_datetime(x)\n        }))\n\n      if (as_sf) {\n        flight_position &lt;- st_as_sf(\n          flight_position,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        )\n      }\n\n      return(flight_position)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving state vector for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position &lt;- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n\nWell, that was a lot. We still don’t even have all of our data yet! We’re still missing our fleet information. To be continued… in the next chapter.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Actually Getting Flight Data (feat. httr2)</span>"
    ]
  },
  {
    "objectID": "get_data.html#footnotes",
    "href": "get_data.html#footnotes",
    "title": "3  Actually Getting Flight Data (feat. httr2)",
    "section": "",
    "text": "I imagine there’s an opportunity for a self-deprecating joke here. I don’t want to write it out and you’re probably clever enough to infer it considering I’m more content sitting in front of my computer typing this than actually going outside.↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Actually Getting Flight Data (feat. httr2)</span>"
    ]
  },
  {
    "objectID": "fleet_data.html",
    "href": "fleet_data.html",
    "title": "4  Actually Getting Fleet Data (feat. googlesheets4)",
    "section": "",
    "text": "4.1 Getting United’s Fleet Data\nNow that we’ve gotten our data from APIs, its time to get the icao24 addresses that will actually enable our functions to work.\nThe API section was a lot. I promise this section is a lot shorter.\nAfter all that work in the API section, we’re ready to pull flight data from a series of icao24 values and… we don’t have any icao24 values. Okay. Where are we going to get a comprehensive list of those for the United mainline fleet? Turns out it actually exists thanks to an open-source hobbyist effort at this Google sheet.\nWhat’s the best way to go about grabbing this information? Glad you asked, there’s a package for that: googlesheets4. We’ll make a new R script for the process of pulling the United fleet called rebuild_fleet_info.R so, when we get to Section 6.2, we can update the list of active United mainline aircraft on a schedule.\nReading this Google Sheet with googlesheets4 is simple - all we need is the ID? Where’s the ID you ask? Well, in this url:\nIt’s that cat-walked-across-my-keyboard hodgepodge of letters between spreadsheets/d/ and /htmlview\nIn this spreadsheet, there’s a bunch of sheets that are sort of similar but have small differences that make our lives a little bit difficult. For example, the header for A319 configurations says “Congfiguration” instead of “Configuration”, and there are several other differences here and there. I’ll save you the time of looking for the differences. All you need to know is that we’ll use any_of() to check if any of the different header options shows up in a given sheet for columns with this type of variation. The second row in each sheet also doesn’t have any machine readable data, at least not in a way that will severely complicate the column structure, so we’ll get rid of it using slice(-1), since it’ll be the first row after the header is processed. We’ll also invoke gs_deauth(). googlesheets4 asks for an API key for some functions, but since we’re just reading sheets, we don’t need access to Google’s API. We’ll further coerce everything to character to make our lives easier when we try to bind_rows() in a second.\nunited_fleet_info &lt;- function(sheet) {\n  gs4_deauth()\n\n  read_sheet(\"1ZlYgN_IZmd6CSx_nXnuP0L0PiodapDRx3RmNkIpxXAo\", sheet = sheet) |&gt;\n    slice(-1) |&gt;\n    rename(\n      aircraft_model = 1,\n      registration = `Reg #`,\n      any_of(\n        c(\n          delivered = \"Delivery\",\n          delivered = \"Delivered\",\n          delivered = \"Delivery Yr\",\n          delivered = \"Delvr\",\n          config = \"Configuration\",\n          config = \"Congfiguration\"\n        )\n      ),\n      ife = IFE,\n      wifi = WiFi,\n      power = Power\n    ) |&gt;\n    select(\n      aircraft_model,\n      registration,\n      delivered,\n      config,\n      ife,\n      wifi,\n      power,\n      J,\n      F,\n      PP,\n      `E+`,\n      Y\n    ) |&gt;\n    mutate(across(everything(), \\(x) as.character(x)))\n}\nAlright. Now we can map this to all sheets in the overarching Google Sheets document. We want to add some flair to our tables later - one easy way to do that is to include an illustrated side profile of each aircraft we’re tracking. United actually posts these images here, so we can piggy-back off of United’s content delivery network to show these images. Moreover, we can grab the seatmaps as well and match them to the configurations contained in these sheets.\nunited_full_fleet_info &lt;- bind_rows(map(1:15, \\(x) united_fleet_info(x))) |&gt;\n  mutate(\n    aircraft_image = case_match(\n      aircraft_model,\n      \"319\" ~\n        \"https://media.united.com/assets/m/7c9ce478782db0ed/original/Airbus-A319-2x.png\", # this is all United has public facing for 'Airbus'\n      \"320\" ~\n        \"https://media.united.com/assets/m/7c9ce478782db0ed/original/Airbus-A319-2x.png\", # maybe a320/21 exist out there, some more google dorking is needed\n      \"21N\" ~\n        \"https://media.united.com/assets/m/7c9ce478782db0ed/original/Airbus-A319-2x.png\",\n      \"73G\" ~\n        \"https://media.united.com/assets/m/e1fdecdb14fce86/original/737-MAX-2x.png\",\n      \"738\" ~\n        \"https://media.united.com/assets/m/e1fdecdb14fce86/original/737-MAX-2x.png\",\n      \"38M\" ~\n        \"https://media.united.com/assets/m/e1fdecdb14fce86/original/737-MAX-2x.png\",\n      \"739\" ~\n        \"https://media.united.com/assets/m/e1fdecdb14fce86/original/737-MAX-2x.png\",\n      \"739ER\" ~\n        \"https://media.united.com/assets/m/e1fdecdb14fce86/original/737-MAX-2x.png\",\n      \"39M\" ~\n        \"https://media.united.com/assets/m/e1fdecdb14fce86/original/737-MAX-2x.png\",\n      \"752\" ~\n        \"https://media.united.com/assets/m/4b144548aa973560/original/757-200-2x.png\",\n      \"753\" ~\n        \"https://media.united.com/assets/m/4b144548aa973560/original/757-200-2x.png\",\n      \"763ER\" ~\n        \"https://media.united.com/assets/m/1b2147dcd5318024/original/767-300-2x.png\",\n      \"764ER\" ~\n        \"https://media.united.com/assets/m/1b2147dcd5318024/original/767-300-2x.png\",\n      \"77G\" ~\n        \"https://media.united.com/assets/m/2c8d559fcfcec38f/original/777-300-2x.png\",\n      \"77M\" ~\n        \"https://media.united.com/assets/m/2c8d559fcfcec38f/original/777-300-2x.png\",\n      \"77O\" ~\n        \"https://media.united.com/assets/m/2c8d559fcfcec38f/original/777-300-2x.png\",\n      \"77N\" ~\n        \"https://media.united.com/assets/m/2c8d559fcfcec38f/original/777-300-2x.png\",\n      \"77U\" ~\n        \"https://media.united.com/assets/m/2c8d559fcfcec38f/original/777-300-2x.png\",\n      \"772ER\" ~\n        \"https://media.united.com/assets/m/2c8d559fcfcec38f/original/777-300-2x.png\",\n      \"77W\" ~\n        \"https://media.united.com/assets/m/2c8d559fcfcec38f/original/777-300-2x.png\",\n      \"787-8\" ~\n        \"https://media.united.com/assets/m/4a29a23b8c38ff55/original/787-8-png-2x.png\",\n      \"787-10\" ~\n        \"https://media.united.com/assets/m/4a29a23b8c38ff55/original/787-8-png-2x.png\",\n      \"787-9\" ~\n        \"https://media.united.com/assets/m/4a29a23b8c38ff55/original/787-8-png-2x.png\"\n    )\n  ) |&gt;\n  mutate(\n    aircraft_model = case_match(\n      aircraft_model,\n      \"319\" ~ \"Airbus A319\",\n      \"320\" ~ \"Airbus A320\",\n      \"21N\" ~ \"Airbus A321neo\",\n      \"73G\" ~ \"Boeing 737-700\",\n      \"738\" ~ \"Boeing 737-800\",\n      \"38M\" ~ \"Boeing 737 MAX 8\",\n      \"739\" ~ \"Boeing 737-900\",\n      \"739ER\" ~ \"Boeing 737-900ER\",\n      \"39M\" ~ \"Boeing 737 MAX 9\",\n      \"752\" ~ \"Boeing 757-200\",\n      \"753\" ~ \"Boeing 757-300\",\n      \"763ER\" ~ \"Boeing 767-300ER\",\n      \"764ER\" ~ \"Boeing 767-400ER\",\n      \"77G\" ~ \"Boeing 777-200\",\n      \"77M\" ~ \"Boeing 777-200\",\n      \"77O\" ~ \"Boeing 777-200ER\",\n      \"77N\" ~ \"Boeing 777-200ER\",\n      \"77U\" ~ \"Boeing 777-200ER\",\n      \"772ER\" ~ \"Boeing 777-200ER\",\n      \"77W\" ~ \"Boeing 777-300\",\n      \"787-8\" ~ \"Boeing 787-8 Dreamliner\",\n      \"787-10\" ~ \"Boeing 787-10 Dreamliner\",\n      \"787-9\" ~ \"Boeing 787-9 Dreamliner\"\n    )\n  ) |&gt;\n  mutate(\n    aircraft_seatmap = case_when(\n      aircraft_model == \"Airbus A319\" & config == \"12F/36E+/78Y\" ~\n        \"https://media.united.com/assets/m/6c2619139fcc1674/original/Airbus-319_SeatMap.png\",\n      aircraft_model == \"Airbus A320\" & config == \"12F/42E+/96Y\" ~\n        \"https://media.united.com/assets/m/77611d0be598e4e2/original/Airbus-320_SeatMap.png\",\n      aircraft_model == \"Airbus A321neo\" & config == \"20F/57E+/123Y\" ~\n        \"https://media.united.com/assets/m/5f1be20d804eac0b/original/0043-A-Airbus-321-NEO_SeatMap_3850x1100.jpg\",\n      aircraft_model == \"Boeing 737-700\" & config == \"12F/36E+/78Y\" ~\n        \"https://media.united.com/assets/m/75349c6fec922b74/original/737-700_Seatmap.png\",\n      aircraft_model == \"Boeing 737-800\" & config == \"16F/42E+/108Y\" ~\n        \"https://media.united.com/assets/m/59d58a3109d4fdcf/original/737_800-V3_Seatmap.png\",\n      aircraft_model == \"Boeing 737-800\" & config == \"16F/54E+/96Y\" ~\n        \"https://media.united.com/assets/m/478c8a4514af749f/original/737_800-V2_Seatmap.png\",\n      aircraft_model == \"Boeing 737-800\" & config == \"16F/48E+/102Y\" ~\n        \"https://media.united.com/assets/m/2e41eddf5126cca/original/737_800-V1_Seatmap.png\",\n      aircraft_model == \"Boeing 737 MAX 8\" & config == \"16F/54E+/96Y\" ~\n        \"https://media.united.com/assets/m/468bc1680a021607/original/737_8_Max_-16_150-_2272px_62colors.webp\",\n      aircraft_model == \"Boeing 737-900\" & config == \"20F/42E+/117Y\" ~\n        \"https://media.united.com/assets/m/7ecc06665f5eadc5/original/737-900-V1_Seatmap.png\",\n      aircraft_model == \"Boeing 737-900\" & config == \"20F/45E+/114Y\" ~\n        \"https://media.united.com/assets/m/672e436134393ac8/original/737-900-V3_Seatmap.png\",\n      aircraft_model == \"Boeing 737-900ER\" & config == \"20F/42E+/117Y\" ~\n        \"https://media.united.com/assets/m/7ecc06665f5eadc5/original/737-900-V1_Seatmap.png\",\n      aircraft_model == \"Boeing 737-900ER\" & config == \"20F/45E+/114Y\" ~\n        \"https://media.united.com/assets/m/672e436134393ac8/original/737-900-V3_Seatmap.png\",\n      aircraft_model == \"Boeing 737 MAX 9\" & config == \"20F/45E+/114Y\" ~\n        \"https://media.united.com/assets/m/478424e0a7f686a3/original/737-9_ICR-B3D_B3Di11142017_3850x1100.jpg\",\n      aircraft_model == \"Boeing 737 MAX 9\" & config == \"20F/48E+/111Y\" ~\n        \"https://media.united.com/assets/m/61c72950276939c2/original/737-900-MAX9_Seatmap.png\",\n      aircraft_model == \"Boeing 757-200\" & config == \"16J/42E+/118Y\" ~\n        \"https://media.united.com/assets/m/5cd6b8b29de9fe1e/original/0024_757-200_SeatMap_3850x1100.png\",\n      aircraft_model == \"Boeing 757-300\" & config == \"24F/54E+/156Y\" ~\n        \"https://media.united.com/assets/m/6ad7c68d690247ad/original/757-300_SeatMap.png\",\n      aircraft_model == \"Boeing 767-300ER\" & config == \"30J/24PP/32E+/113Y\" ~\n        \"https://media.united.com/assets/m/7f46e01710b8c8ee/original/767-300-V3_SeatMap.png\",\n      aircraft_model == \"Boeing 767-300ER\" & config == \"46J/22PE/43E+/56Y\" ~\n        \"https://media.united.com/assets/m/3a404651615a2ff7/original/767-300-V2_SeatMap.png\",\n      aircraft_model == \"Boeing 767-400ER\" & config == \"34J/24PE/48E+/125Y\" ~\n        \"https://media.united.com/assets/m/402d979292c41b69/original/767-400_V2_Seatmap.png\",\n      aircraft_model == \"Boeing 777-200\" & config == \"28F/102E+/234Y\" ~\n        \"https://media.united.com/assets/m/5f45564c1af4723c/original/777-200_V2_SeatMap.png\",\n      aircraft_model == \"Boeing 777-200ER\" & config == \"32F/124E+/206Y\" ~ NA,\n      aircraft_model == \"Boeing 777-200ER\" & config == \"50J/24PE/46E+/156Y\" ~\n        \"https://media.united.com/assets/m/135e5704439135f4/original/777-200_V1_SeatMap.png\",\n      aircraft_model == \"Boeing 777-300\" & config == \"60J/24PE/62E+/204Y\" ~\n        \"https://media.united.com/assets/m/7d514e882a9d133f/original/777-300ER_SeatMap.png\",\n      aircraft_model == \"Boeing 787-8 Dreamliner\" &\n        config == \"28J/21PE/36E+/158Y\" ~\n        \"https://media.united.com/assets/m/c8b1f1d11e6c118/original/787-8_SeatMap.png\",\n      aircraft_model == \"Boeing 787-10 Dreamliner\" &\n        config == \"44J/21PE/54E+/199Y\" ~\n        \"https://media.united.com/assets/m/3ccf19b38c5430c2/original/787-10_SeatMap.png\",\n      aircraft_model == \"Boeing 787-9 Dreamliner\" &\n        config == \"48J/21PE/39E+/149Y\" ~\n        \"https://media.united.com/assets/m/6d72d9a9f884e8d2/original/787-9_SeatMap.png\"\n    )\n  ) |&gt;\n  drop_na(aircraft_image)\nWe’ll drop NA on the aircraft_image column, as information rows, similar to row 2, that do not conform to the schema are missing information on aircraft_model (but are not blank!), therefore missing information on aircraft_image. Now we can save that to a CSV.\nwrite_csv(united_full_fleet_info, \"data/united_full_fleet_info.csv\")\nRemember that function we built to go from registration numbers to icao24 addresses in Chapter 3? We’ll use that on a list of United mainline registrations. Let’s pull the registration column from the full fleet info, making sure we’re not passing any NAs and any untidy data that’s slipped through, i.e., values not starting with “N” or anything with whitespace. We’ll map the get_icao24_from_registration function to this vector and then write that out as data/compatible_registrations.csv. Make sure you have a data folder set up in your project directory! You can also change the filepath as you wish.\nunited_icao_list &lt;- united_full_fleet_info |&gt;\n  drop_na(registration) |&gt;\n  filter(str_starts(registration, \"N\")) |&gt;\n  mutate(registration = trimws(registration)) |&gt;\n  pull(registration)\ncompatible_registrations &lt;- bind_rows(map(\n  united_icao_list,\n  get_icao24_from_registration\n))\n\nwrite_csv(compatible_registrations, \"data/compatible_registrations.csv\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Actually Getting Fleet Data (feat. googlesheets4)</span>"
    ]
  },
  {
    "objectID": "fleet_data.html#sec-fleet",
    "href": "fleet_data.html#sec-fleet",
    "title": "4  Actually Getting Fleet Data (feat. googlesheets4)",
    "section": "",
    "text": "https://docs.google.com/spreadsheets/d/1ZlYgN_IZmd6CSx_nXnuP0L0PiodapDRx3RmNkIpxXAo/htmlview\n\n\n\n\n\n\n\n\n\n\n\n\n\nAgain, there are varied approaches you can take here. A better approach for permanence would be to download all the images, host them in your repo, and serve them using local_image() or an equivalent function. I’m adopting some assumptions here in pursuing the CDN and web_image() approach, namely that United’s CDN is reliable and that they won’t suddenly decide to change the locations of their media assets.\nAlso, I’m sorry in advance to any aviation purists out there. United does not make side profiles for all their aircraft publicly available. This is particularly noticeable for the Airbus A319/A320/A321neo and the Boeing 737 variations, for which United simply put the image of one aircraft up (the A319 and a 737 MAX variant) and called it a day. If anyone knows where the other assets are located, that’d be a small but cool way to update this project.\nYou might have an easier go of this with other airlines. Lufthansa, for example, has published all kinds of side profiles of their aircraft, which makes me rethink whether I should’ve done this with Lufthansa aircraft instead. I digress.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Actually Getting Fleet Data (feat. googlesheets4)</span>"
    ]
  },
  {
    "objectID": "fleet_data.html#customizing-the-fleet-tracker-to-another-airline",
    "href": "fleet_data.html#customizing-the-fleet-tracker-to-another-airline",
    "title": "4  Actually Getting Fleet Data (feat. googlesheets4)",
    "section": "4.2 Customizing the Fleet Tracker to Another Airline",
    "text": "4.2 Customizing the Fleet Tracker to Another Airline\nIt’s worth adding a quick note that if you want to take this project and run with another airline, this is the major piece you’ll need to change out in order to do so. Chapter 3 will work universally for whatever airline you choose, but you’ll need a list of icao24 addresses to pass through these functions. Apart from getting different icao24 addresses, you’ll probably want a table with information on the fleet similar to what’s been presented in this section - at least the aircraft models and links to visuals you’d like to include. If you change the schema, you’ll probably need to change some of the table code, covered in the next chapter.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Actually Getting Fleet Data (feat. googlesheets4)</span>"
    ]
  },
  {
    "objectID": "map_tables.html",
    "href": "map_tables.html",
    "title": "5  Who Invited a Map to the Table Contest?",
    "section": "",
    "text": "5.1 The Map Table Function\nI did. Guilty as charged. It’s time to actually make some tables!\nSpoiler: we’re going to write a function that’ll produce gt tables for each aircraft in our dataset. Why? Well, it has to do a little bit with how mapgl works.\nSidebar that mapgl is a very cool package that brings Maplibre and Mapbox mapping capabilities to R, specifically for Quarto and Shiny apps. Maplibre and Mapbox provide functionality for tables that show up on-hover and on-click over geometric features. Maybe I haven’t scoured the internet long enough, but, generally, when I see a table in a mapgl map, it looks something like this:\nNothing wrong with this table. It just doesn’t fully utilize the capabilities Maplibre has to offer. If we look at the reprex that the author of mapgl, Kyle Walker, provides for producing these pop-ups:\nfl_age$popup &lt;- glue::glue(\n  \"&lt;strong&gt;GEOID: &lt;/strong&gt;{fl_age$GEOID}&lt;br&gt;&lt;strong&gt;Median age: &lt;/strong&gt;{fl_age$estimate}\"\n)\nInteresting… it’s HTML. Wait. Aren’t gt tables HTML? Sure are! Especially when we pass as_raw_html() after creating them. Turns out, mapgl does a great job at rendering these tables for use in maps!\nBack to the reason about why we’re producing a function to make gt tables on a per-row basis. We’re going to use this function, in combination with map and mutate, to contain the HTML needed to render the table in a column. We’ll then call that column inside our Maplibre functions. Simple enough, hopefully.\nAlright, well it’s probably easiest if we build an initial draft of the table first, then worry about the function part.\nFirst, let’s get the data we actually want to map. We have fleet info, we have an aircraft’s state vector (which includes the aircraft’s present callsign), and we have a way to get the route information from a callsign. Let’s join these tables up together using a series of left joins. We’ll actually need to include the registration info in the data we derived from OpenSky, which only contains the icao24 address. Luckily, we have the get_registration_from_icao24() function for this purpose.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.1     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sfarrow)\nlibrary(gt)\nlibrary(sf)\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE\n\nlibrary(httr2)\nlibrary(glue)\nunited_full_fleet_info &lt;- read_csv(\"data/united_full_fleet_info.csv\")\n\nRows: 1056 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (14): aircraft_model, registration, delivered, config, ife, wifi, power,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n### In the reprex/GitHub repo, I source these from a script, \"support_functions.R\"\nget_registration_from_icao24 &lt;- function(icao24, return_tibble = TRUE) {\n  tryCatch(\n    {\n      registration &lt;- request(\"https://api.adsbdb.com/v0/mode-s/\") |&gt;\n        req_url_path_append(icao24) |&gt;\n        req_perform() |&gt;\n        resp_body_json()\n\n      if (return_tibble) {\n        return(as_tibble(registration$response) |&gt; rename(registration = value))\n      } else {\n        return(registration$response)\n      }\n    },\n    error = function(e) {\n      log_error(\"{icao24} encountered error {e}\")\n      return(NULL)\n    }\n  )\n}\n\nget_route_information &lt;- function(callsign) {\n  tryCatch(\n    {\n      json &lt;- list(\n        planes = list(list(callsign = callsign, lat = 0, lng = 0))\n      )\n\n      route &lt;- request(\"https://api.adsb.lol/api/0/routeset/\") |&gt;\n        req_body_json(json) |&gt;\n        req_perform() |&gt;\n        resp_body_json()\n\n      route &lt;- route[[1]] |&gt; as_tibble()\n      if (nrow(route) &gt; 2) {\n        stop(\n          \"Callsign has multiple routes or a multi-leg route. Unable to determine routing.\"\n        )\n      }\n      route_origin &lt;- route[1, ] |&gt;\n        unnest_wider(`_airports`, names_sep = \"_\") |&gt;\n        rename_all(~ glue(\"origin_{.x}\"))\n      route_destination &lt;- route[2, ] |&gt;\n        unnest_wider(`_airports`, names_sep = \"_\") |&gt;\n        rename_all(~ glue(\"destination_{.x}\"))\n\n      route &lt;- bind_cols(route_origin, route_destination) |&gt;\n        rename_all(~ str_replace_all(.x, \"__\", \"_\")) |&gt;\n        mutate(callsign = callsign)\n\n      return(route)\n    },\n    error = function(e) {\n      log_error(\"Error getting route info for {callsign} {e}\")\n      route &lt;- tibble(\n        origin_airports_iata = NA,\n        origin_airports_name = NA,\n        origin_airports_countryiso2 = NA,\n        origin_plausible = NA,\n        destination_airports_iata = NA,\n        destination_airports_name = NA,\n        destination_airports_countryiso2 = NA,\n        destination_plausible = NA,\n      )\n      return(route)\n    }\n  )\n}\n###\n\nunited_10_positions &lt;- st_read_parquet(\"data/state_vector.parquet\") |&gt;\n  mutate(\n    registration = map_chr(icao24, \\(x) {\n      get_registration_from_icao24(x, return_tibble = F)\n    })\n  ) |&gt;\n  st_as_sf()\nI’ve called a bunch of these objects united_10_* due to my original plan to pull 10 aircraft every 15 minutes (40 * 4 = 160 * 24 = 3840 API credits). We’ll want to get the barometric altitude that we stored in the simple features coordinates back out into its own column so we can show that in a table, which we can do using st_coordinates(x)[,3].1\nunited_10_positions &lt;- left_join(\n  united_10_positions |&gt;\n    mutate(baro_altitude = st_coordinates(united_10_positions)[, 3]),\n  united_full_fleet_info\n)\n\nJoining with `by = join_by(registration)`\n\nroute_info &lt;- bind_rows(\n  map(united_10_positions |&gt; drop_na(callsign) |&gt; pull(callsign), \\(x) {\n    get_route_information(x)\n  })\n)\nunited_10_positions &lt;- left_join(united_10_positions, route_info) |&gt;\n  drop_na(callsign)\n\nJoining with `by = join_by(callsign)`\ngt doesn’t really play well with sf geometries, so let’s create an object with those removed:\nunited_10_gt &lt;- united_10_positions |&gt; as_tibble() |&gt; drop_na(callsign)\nLet’s take a peek at the schema real quick:\nunited_10_gt\n\n# A tibble: 1 × 61\n  time                icao24 callsign origin_country time_position      \n  &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;          &lt;dttm&gt;             \n1 2025-10-01 23:05:56 a126cc UAL2353  United States  2025-10-01 23:05:56\n# ℹ 56 more variables: last_contact &lt;dttm&gt;, on_ground &lt;lgl&gt;, velocity &lt;dbl&gt;,\n#   true_track &lt;dbl&gt;, vertical_rate &lt;int&gt;, sensors &lt;lgl&gt;, geo_altitude &lt;dbl&gt;,\n#   squawk &lt;lgl&gt;, special_purpose &lt;lgl&gt;, position_source &lt;int&gt;,\n#   registration &lt;chr&gt;, baro_altitude &lt;dbl&gt;, aircraft_model &lt;chr&gt;,\n#   delivered &lt;chr&gt;, config &lt;chr&gt;, ife &lt;chr&gt;, wifi &lt;chr&gt;, power &lt;chr&gt;, J &lt;chr&gt;,\n#   F &lt;chr&gt;, PP &lt;chr&gt;, `E+` &lt;chr&gt;, Y &lt;chr&gt;, aircraft_image &lt;chr&gt;,\n#   aircraft_seatmap &lt;chr&gt;, origin_airport_codes_iata &lt;chr&gt;, …\nOur data is currently wide, meaning it has more columns than rows. We’ll need to pivot it long, i.e., more rows than columns, for use in a display table. We’ll need to mutate all the columns to character before doing so, as there are columns that won’t live together when pivoted, i.e., the date time columns we created by converting Unix timestamps will not live with text information like the aircraft model.\nBefore we pivot longer, we probably want to grab some key information from the table so we can display it outside the usual areas, as in, outside of the body cells. For example, we might want to put the callsign in the table header. Let’s save united_10_gt to an object called tbl and do the work of pulling out some components we want using tbl$column. We could do that within our gt functions, namely using glue() to evaluate these expressions on the spot when wrapped in braces {}, but this approach makes things a little bit more visible to us.\ntbl &lt;- united_10_gt\n\naircraftimg &lt;- tbl$aircraft_image\naircraftmodel &lt;- tbl$aircraft_model\n\ncallsign &lt;- tbl$callsign\n\ntbl &lt;- tbl |&gt;\n  mutate(across(everything(), \\(x) as.character(x))) |&gt;\n  pivot_longer(everything())\ntbl |&gt;\n  gt() |&gt;\n  tab_header(\n    title = html(glue(\n      \"&lt;b&gt;{callsign}&lt;/b&gt;&lt;br&gt;{web_image(aircraftimg, height = '9em')}\"\n    ))\n  ) |&gt;\n  tab_options(table.width = pct(100), container.width = pct(100)) |&gt;\n  tab_source_note(\n    \"Information sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\"\n  ) |&gt;\n  fmt_markdown() |&gt;\n  tab_style(\n    list(\n      cell_text(weight = 500, color = \"#FFFFFF\"),\n      cell_fill(color = \"#000000\")\n    ),\n    list(cells_row_groups())\n  ) |&gt;\n  tab_options(column_labels.hidden = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nUAL2353\n\n\n\n\n\ntime\n2025-10-01 23:05:56\n\n\nicao24\na126cc\n\n\ncallsign\nUAL2353\n\n\norigin_country\nUnited States\n\n\ntime_position\n2025-10-01 23:05:56\n\n\nlast_contact\n2025-10-01 23:05:56\n\n\non_ground\nFALSE\n\n\nvelocity\n267.79\n\n\ntrue_track\n112.48\n\n\nvertical_rate\n0\n\n\nsensors\nNA\n\n\ngeo_altitude\n11254.74\n\n\nsquawk\nNA\n\n\nspecial_purpose\nFALSE\n\n\nposition_source\n0\n\n\nregistration\nN17309\n\n\nbaro_altitude\n10668\n\n\naircraft_model\nBoeing 737 MAX 8\n\n\ndelivered\n2023\n\n\nconfig\n16F/54E+/96Y\n\n\nife\nAVOD\n\n\nwifi\nViaSatKA\n\n\npower\n110 V\n\n\nJ\nNA\n\n\nF\n16\n\n\nPP\nNA\n\n\nE+\n54\n\n\nY\n96\n\n\naircraft_image\nhttps://media.united.com/assets/m/e1fdecdb14fce86/original/737-MAX-2x.png\n\n\naircraft_seatmap\nhttps://media.united.com/assets/m/468bc1680a021607/original/737_8_Max_-16_150-_2272px_62colors.webp\n\n\norigin_airport_codes_iata\nIAH-POS\n\n\norigin_airports_alt_feet\n97\n\n\norigin_airports_alt_meters\n29.57\n\n\norigin_airports_countryiso2\nUS\n\n\norigin_airports_iata\nIAH\n\n\norigin_airports_icao\nKIAH\n\n\norigin_airports_lat\n29.9844\n\n\norigin_airports_location\nHouston\n\n\norigin_airports_lon\n-95.3414\n\n\norigin_airports_name\nGeorge Bush Intercontinental Houston Airport\n\n\norigin_airline_code\nUAL\n\n\norigin_airport_codes\nKIAH-TTPP\n\n\norigin_callsign\nUAL2353\n\n\norigin_number\n2353\n\n\norigin_plausible\n0\n\n\ndestination_airport_codes_iata\nIAH-POS\n\n\ndestination_airports_alt_feet\n58\n\n\ndestination_airports_alt_meters\n17.68\n\n\ndestination_airports_countryiso2\nTT\n\n\ndestination_airports_iata\nPOS\n\n\ndestination_airports_icao\nTTPP\n\n\ndestination_airports_lat\n10.5954\n\n\ndestination_airports_location\nPort of Spain\n\n\ndestination_airports_lon\n-61.3372\n\n\ndestination_airports_name\nPiarco International Airport\n\n\ndestination_airline_code\nUAL\n\n\ndestination_airport_codes\nKIAH-TTPP\n\n\ndestination_callsign\nUAL2353\n\n\ndestination_number\n2353\n\n\ndestination_plausible\n0\n\n\ngeometry\nc(-87.0249, 28.0255, 10668)\n\n\n\nInformation sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\nThis is a good start. But this is way too much data for a table. Maybe let’s select only some specific information from the table? Like so:\ntbl &lt;- united_10_gt\n\naircraftimg &lt;- tbl$aircraft_image\naircraftmodel &lt;- tbl$aircraft_model\n\ncallsign &lt;- tbl$callsign\n\ntbl &lt;- tbl |&gt;\n  select(\n    registration,\n    aircraft_model,\n    delivered,\n    config,\n    velocity,\n    true_track,\n    vertical_rate,\n    baro_altitude,\n    squawk,\n    special_purpose\n  ) |&gt;\n  mutate(across(everything(), \\(x) as.character(x))) |&gt;\n  pivot_longer(everything())\n\ntbl |&gt;\n  gt() |&gt;\n  tab_header(\n    title = html(glue(\n      \"&lt;b&gt;{callsign}&lt;/b&gt;&lt;br&gt;{web_image(aircraftimg, height = '9em')}\"\n    ))\n  ) |&gt;\n  tab_options(table.width = pct(100), container.width = pct(100)) |&gt;\n  tab_source_note(\n    \"Information sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\"\n  ) |&gt;\n  fmt_markdown() |&gt;\n  tab_style(\n    list(\n      cell_text(weight = 500, color = \"#FFFFFF\"),\n      cell_fill(color = \"#000000\")\n    ),\n    list(cells_row_groups())\n  ) |&gt;\n  tab_options(column_labels.hidden = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nUAL2353\n\n\n\n\n\nregistration\nN17309\n\n\naircraft_model\nBoeing 737 MAX 8\n\n\ndelivered\n2023\n\n\nconfig\n16F/54E+/96Y\n\n\nvelocity\n267.79\n\n\ntrue_track\n112.48\n\n\nvertical_rate\n0\n\n\nbaro_altitude\n10668\n\n\nsquawk\nNA\n\n\nspecial_purpose\nFALSE\n\n\n\nInformation sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\nThis is a lot more readable. But now I feel like we’re missing some cool information we could otherwise be showing. One major part of aircraft on flight tracking maps is their origin and destination. And you know what’d be super cool? Is if we added some Bootstrap style elements to our table. Can we even do that with gt? Sure we can, and we don’t need any hacks like trying to mangle some HTML together - all we need is a little glue.\nLet’s iron out what these value boxes should look like first.\nlibrary(bslib)\n\n\nAttaching package: 'bslib'\n\n\nThe following object is masked from 'package:utils':\n\n    page\n\nlibrary(fontawesome)\n\ntbl &lt;- united_10_gt\n\nvalue_box(\n  value = tbl$origin_airports_iata,\n  title = html(glue(\n    \"{tbl$origin_airports_name}&lt;br&gt;{tbl$origin_airports_countryiso2}\"\n  )),\n  showcase = fa(\"plane-departure\", height = \"4.5em\"),\n  theme = value_box_theme(\"bg-gradient-blue-purple\")\n)\n\n\n\n\n\n\nGeorge Bush Intercontinental Houston AirportUS\nIAH\n\n\n\n\n\n\nvalue_box(\n  value = tbl$destination_airports_iata,\n  title = html(glue(\n    \"{tbl$destination_airports_name}&lt;br&gt;{tbl$destination_airports_countryiso2}\"\n  )),\n  showcase = fa(\"plane-arrival\", height = \"4.5em\"),\n  theme = value_box_theme(\"bg-gradient-blue-purple\")\n)\n\n\n\n\n\n\nPiarco International AirportTT\nPOS\nAbove, we’re just pulling some information from the table using tbl$column, specifically some of the information in the origin_* and destination_* columns, adding some styling to the boxes using value_box_theme(), and pulling in some icons from Font Awesome using fa().\nThose look pretty good. But we need them to live together on a single row. I know! We’ll use layout_column_wrap().\nlibrary(bslib)\nlibrary(fontawesome)\n\ntbl &lt;- united_10_gt\n\norigin_value_box &lt;- value_box(\n  value = tbl$origin_airports_iata,\n  title = html(glue(\n    \"{tbl$origin_airports_name}&lt;br&gt;{tbl$origin_airports_countryiso2}\"\n  )),\n  showcase = fa(\"plane-departure\", height = \"4.5em\"),\n  theme = value_box_theme(\"bg-gradient-blue-purple\")\n)\n\ndest_value_box &lt;- value_box(\n  value = tbl$destination_airports_iata,\n  title = html(glue(\n    \"{tbl$destination_airports_name}&lt;br&gt;{tbl$destination_airports_countryiso2}\"\n  )),\n  showcase = fa(\"plane-arrival\", height = \"4.5em\"),\n  theme = value_box_theme(\"bg-gradient-blue-purple\")\n)\n\nlayout_column_wrap(origin_value_box, dest_value_box)\n\n\n\n\n\n\n\n\nGeorge Bush Intercontinental Houston AirportUS\nIAH\n\n\n\n\n\n\n\n\n\n\n\n\nPiarco International AirportTT\nPOS\nGreat! But I remember that there’s something off about these routes… oh, right, @#sec-route-info. The routes aren’t always accurate. I don’t really want inaccurate information to be front and center (though, to some extent, this is unavoidable given the points listed in the section). Maybe we can trade out the information when the database tells us the route isn’t plausible? That is, when origin_plausible == 0 | destination_plausible == 0?\nif (tbl$origin_plausible == 1) {\n  origin_value_box &lt;- value_box(\n    value = tbl$origin_airports_iata,\n    title = html(glue(\n      \"{tbl$origin_airports_name}&lt;br&gt;{tbl$origin_airports_countryiso2}\"\n    )),\n    showcase = fa(\"plane-departure\", height = \"4.5em\"),\n    theme = value_box_theme(\"bg-gradient-blue-purple\")\n  )\n} else {\n  origin_value_box &lt;- value_box(\n    value = glue(\"{tbl$velocity} m/s\"),\n    title = \"Aircraft Velocity\",\n    theme = value_box_theme(\"bg-gradient-blue-purple\"),\n    showcase = fa(\"angles-right\", height = \"3em\")\n  )\n}\ndest_value_box &lt;- if (tbl$destination_plausible == 1) {\n  value_box(\n    value = tbl$destination_airports_iata,\n    title = html(glue(\n      \"{tbl$destination_airports_name}&lt;br&gt;{tbl$destination_airports_countryiso2}\"\n    )),\n    showcase = fa(\"plane-arrival\", height = \"4.5em\"),\n    theme = value_box_theme(\"bg-gradient-blue-purple\")\n  )\n} else {\n  dest_value_box &lt;- value_box(\n    value = glue(\"{tbl$baro_altitude} meters\"),\n    title = \"Altitude\",\n    theme = value_box_theme(\"bg-gradient-blue-purple\"),\n    showcase = if (tbl$vertical_rate &gt; 0) {\n      fa(\"angle-up\", height = \"3em\")\n    } else if (tbl$vertical_rate == 0) {\n      fa(\"minus\", fill = \"#FFFFFF\", \"3em\")\n    } else {\n      fa(\"angle-down\", height = \"3em\")\n    }\n  )\n}\n\nlayout_column_wrap(origin_value_box, dest_value_box)\n\n\n\n\n\n\n\n\nAircraft Velocity\n267.79 m/s\n\n\n\n\n\n\n\n\n\n\n\n\nAltitude\n10668 meters\nOne quick side note about this value box, specifically the vertical rate value box. The showcase has a little if-else statement hidden away:\nshowcase = if (tbl$vertical_rate &gt; 0) {\n  fa(\"angle-up\", height = \"3em\")\n} else if (tbl$vertical_rate == 0) {\n  fa(\"minus\", fill = \"#FFFFFF\", \"3em\")\n} else {\n  fa(\"angle-down\", height = \"3em\")\n}\nThis if-else gate determines what kind of symbol to show: if an aircraft is climbing, i.e., its vertical rate is greater than zero, an “angle-up” symbol (an up arrow, an up chevron, whatever you want to call it it’s fine by me) appears. Exactly zero, a dash (minus, again, same difference to me) appears. Else, a down arrow/angle/etc.\nMaybe we should prepare a disclaimer for the table to identify when we’re swapping out route info at the top for operational info, as well as provide some caveats we listed in Section 2.1.2, so the viewer doesn’t get confused:\nif (tbl$origin_plausible == 0 | tbl$destination_plausible == 0) {\n  reliability &lt;- glue(\n    \"{fa('triangle-exclamation', fill = '#990000')} &lt;b&gt;Route data for {callsign} is unreliable. Operational information is displayed instead.&lt;/b&gt;\"\n  )\n} else {\n  reliability &lt;- glue(\n    \"{fa('triangle-exclamation', fill = '#FFB343')} &lt;b&gt;Route data for {callsign} is plausible, but may still be outdated/incorrect. Double check using other sources.&lt;/b&gt;\"\n  )\n}\n\nreliability\n\n&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#990000;overflow:visible;position:relative;\"&gt;&lt;path d=\"M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z\"/&gt;&lt;/svg&gt; &lt;b&gt;Route data for UAL2353 is unreliable. Operational information is displayed instead.&lt;/b&gt;\nAlright. Returning to the table above, I think we still need some information other than those boxes. To that end, we’ll mutate the table to add some variables:\nmutate(\n  origin_info = if (origin_plausible == 0 & is.na(origin_airports_name)) {\n    as.character(html(glue(\n      \"{fa('triangle-exclamation', fill = '#990000')} Unable to Determine\"\n    )))\n  } else if (origin_plausible == 0) {\n    as.character(html(glue(\n      \"{fa('triangle-exclamation', fill = '#990000')} {origin_airports_name} {get_flag(origin_airports_countryiso2)}\"\n    )))\n  } else {\n    as.character(html(glue(\n      \"{origin_airports_iata} - {origin_airports_name} {get_flag(origin_airports_countryiso2)}\"\n    )))\n  }\n) |&gt;\n  mutate(\n    destination_info = if (\n      destination_plausible == 0 & is.na(destination_airports_name)\n    ) {\n      as.character(html(glue(\n        \"{fa('triangle-exclamation', fill = '#990000')} Unable to Determine\"\n      )))\n    } else if (destination_plausible == 0) {\n      as.character(html(glue(\n        \"{fa('triangle-exclamation', fill = '#990000')} {destination_airports_name} {get_flag(destination_airports_countryiso2)}\"\n      )))\n    } else {\n      as.character(html(glue(\n        \"{destination_airports_iata} - {destination_airports_name} {get_flag(destination_airports_countryiso2)}\"\n      )))\n    }\n  )\nSidebar that everyone loves a good country flag. So we’ll probably want to include a small country flag somewhere in the origin_info and destination_info string. We’ll rip the code from gt::fmt_flag in order to do this, leveraging the gt:::flag_tbl object:\nget_flag &lt;- function(x, height = \"1em\") {\n  flag_tbl &lt;- gt:::flag_tbl\n  country_names &lt;- gt:::country_names\n\n  x_str &lt;- character(length(x))\n  x_str_non_missing &lt;- x[!is.na(x)]\n  x_str_non_missing &lt;- vapply(\n    seq_along(x_str_non_missing),\n    FUN.VALUE = character(1L),\n    USE.NAMES = FALSE,\n    FUN = function(x) {\n      if (grepl(\",\", x_str_non_missing[x], fixed = TRUE)) {\n        countries &lt;- toupper(unlist(strsplit(x_str_non_missing[x], \",\\\\s*\")))\n      } else {\n        countries &lt;- toupper(x_str_non_missing[x])\n      }\n      if (is.numeric(height)) {\n        height &lt;- paste0(height, \"px\")\n      }\n      out &lt;- c()\n      for (y in seq_along(countries)) {\n        country_i &lt;- toupper(countries[y])\n        country_i_len &lt;- nchar(country_i)\n        flag_svg &lt;- flag_tbl[\n          flag_tbl[[paste0(\"country_code_\", country_i_len)]] == country_i,\n        ][[\"country_flag\"]]\n        out_y &lt;- gsub(\n          \"&lt;svg.*?&gt;\",\n          paste0(\n            \"&lt;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" \",\n            \"aria-hidden=\\\"true\\\" role=\\\"img\\\" \",\n            \"width=\\\"512\\\" height=\\\"512\\\" \",\n            \"viewBox=\\\"0 0 512 512\\\" \",\n            \"style=\\\"vertical-align:-0.125em;\",\n            \"image-rendering:optimizeQuality;\",\n            \"height:\",\n            height,\n            \";\",\n            \"width:\",\n            height,\n            \";\",\n            \"\\\"\",\n            \"&gt;\"\n          ),\n          flag_svg\n        )\n        out &lt;- c(out, out_y)\n      }\n      paste0(\n        \"&lt;span style=\\\"white-space:nowrap;\\\"&gt;\",\n        paste0(out, collapse = \"\"),\n        \"&lt;/span&gt;\"\n      )\n    }\n  )\n  x_str[!is.na(x)] &lt;- x_str_non_missing\n  x_str[is.na(x)] &lt;- NA_character_\n  x_str\n}\n... |&gt;\n  mutate(\n    amenity_ife = case_when(\n      ife == \"NO\" ~ NA,\n      str_detect(ife, \"No \") ~ NA,\n      str_detect(ife, \"AVOD|DTV\") & str_detect(ife, \"PDE\") ~\n        glue(\n          '{web_image(\"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\")} {web_image(\"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\")}'\n        ),\n      str_detect(ife, \"AVOD|DTV\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"Seatback|SEATBACK\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"PDE\") ~\n        web_image(\n          \"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\"\n        )\n    )\n  ) |&gt;\n  mutate(\n    amenity_wifi = case_when(\n      wifi == \"NO\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/4d2b44a2bcff27d9/original/x-global-icons-travel-airport-wifi.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      power == \"NO\" ~ NA,\n      power == \"F/E+\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/3acf299d26de7a3b/original/x-global-icons-travel-airport-in-seat-power.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      str_detect(power, \"USB\") ~\n        glue(\n          \"{amenity_power} {web_image('https://media.united.com/assets/m/601a3d239d42470/original/USB-icon.svg')}\"\n        ),\n      .default = amenity_power\n    )\n  ) |&gt;\n  mutate(\n    amenities = glue(\"{amenity_wifi} {amenity_power} {amenity_ife}\", .na = \"\")\n  )\n... |&gt;\n  mutate(velocity = glue(\"{velocity} m/s\")) |&gt;\n  mutate(true_track = glue(\"{true_track} degrees\")) |&gt;\n  mutate(vertical_rate = glue(\"{vertical_rate} m/s\")) |&gt;\n  mutate(baro_altitude = glue(\"{baro_altitude} m\"))\n... |&gt;\n  select(\n    registration,\n    aircraft_model,\n    delivered,\n    config,\n    amenities,\n    velocity,\n    true_track,\n    vertical_rate,\n    baro_altitude,\n    squawk,\n    special_purpose,\n    origin_info,\n    destination_info\n  ) |&gt;\n  rename(\n    \"Registration Number\" = registration,\n    \"Aircraft Model\" = aircraft_model,\n    \"Delivery Year\" = delivered,\n    \"Seating Configuration\" = config,\n    \"Amenities On-Board\" = amenities,\n    \"Velocity\" = velocity,\n    \"Climb Rate\" = vertical_rate,\n    \"True Track\" = true_track,\n    \"Barometric Altitude\" = baro_altitude,\n    \"Squawk Code\" = squawk,\n    \"Special Purpose Flight\" = special_purpose,\n    \"Origin Airport\" = origin_info,\n    \"Destination Airport\" = destination_info\n  )\n... |&gt;\n  mutate(\n    category = case_match(\n      name,\n      \"Registration Number\" ~ \"Aircraft Information\",\n      \"Aircraft Model\" ~ \"Aircraft Information\",\n      \"Delivery Year\" ~ \"Aircraft Information\",\n      \"Seating Configuration\" ~ \"Aircraft Information\",\n      \"Amenities On-Board\" ~ \"Aircraft Information\",\n      \"Velocity\" ~ \"Operational Information\",\n      \"True Track\" ~ \"Operational Information\",\n      \"Climb Rate\" ~ \"Operational Information\",\n      \"Barometric Altitude\" ~ \"Operational Information\",\n      \"Squawk Code\" ~ \"Operational Information\",\n      \"Special Purpose Flight\" ~ \"Operational Information\",\n      \"Origin Airport\" ~ \"Route Information\",\n      \"Destination Airport\" ~ \"Route Information\"\n    )\n  )\nLet’s add it all together!\ntbl &lt;- united_10_gt\n\naircraftimg &lt;- tbl$aircraft_image\naircraftmodel &lt;- tbl$aircraft_model\n\ncallsign &lt;- tbl$callsign\nunited_logo &lt;- web_image(\n  \"https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\",\n  height = \"1em\"\n)\n\nif (is.null(tbl$origin_plausible) | is.na(tbl$origin_plausible)) {\n  tbl$origin_plausible &lt;- 0\n}\n\nif (is.null(tbl$destination_plausible | is.na(tbl$destination_plausible))) {\n  tbl$destination_plausible &lt;- 0\n}\n\n### Add fallbacks in case route data is inaccurate. API provides a 0/1 metric for plausibility.\nif (tbl$origin_plausible == 1) {\n  origin_value_box &lt;- value_box(\n    value = tbl$origin_airports_iata,\n    title = html(glue(\n      \"{tbl$origin_airports_name}&lt;br&gt;{tbl$origin_airports_countryiso2}\"\n    )),\n    showcase = fa(\"plane-departure\", height = \"4.5em\"),\n    theme = value_box_theme(\"bg-gradient-blue-purple\")\n  )\n} else {\n  origin_value_box &lt;- value_box(\n    value = glue(\"{tbl$velocity} m/s\"),\n    title = \"Aircraft Velocity\",\n    theme = value_box_theme(\"bg-gradient-blue-purple\"),\n    showcase = fa(\"angles-right\", height = \"3em\")\n  )\n}\ndest_value_box &lt;- if (tbl$destination_plausible == 1) {\n  value_box(\n    value = tbl$destination_airports_iata,\n    title = html(glue(\n      \"{tbl$destination_airports_name}&lt;br&gt;{tbl$destination_airports_countryiso2}\"\n    )),\n    showcase = fa(\"plane-arrival\", height = \"4.5em\"),\n    theme = value_box_theme(\"bg-gradient-blue-purple\")\n  )\n} else {\n  dest_value_box &lt;- value_box(\n    value = glue(\"{tbl$baro_altitude} meters\"),\n    title = \"Altitude\",\n    theme = value_box_theme(\"bg-gradient-blue-purple\"),\n    showcase = if (tbl$vertical_rate &gt; 0) {\n      fa(\"angle-up\", height = \"3em\")\n    } else if (tbl$vertical_rate == 0) {\n      fa(\"minus\", fill = \"#FFFFFF\", \"3em\")\n    } else {\n      fa(\"angle-down\", height = \"3em\")\n    }\n  )\n}\n\nif (tbl$origin_plausible == 0 | tbl$destination_plausible == 0) {\n  reliability &lt;- glue(\n    \"{fa('triangle-exclamation', fill = '#990000')} &lt;b&gt;Route data for {callsign} is unreliable. Operational information is displayed instead.&lt;/b&gt;\"\n  )\n} else {\n  reliability &lt;- glue(\n    \"{fa('triangle-exclamation', fill = '#FFB343')} &lt;b&gt;Route data for {callsign} is plausible, but may still be outdated/incorrect. Double check using other sources.&lt;/b&gt;\"\n  )\n}\n\ncontact &lt;- tbl$last_contact\n\nget_flag &lt;- function(x, height = \"1em\") {\n  flag_tbl &lt;- gt:::flag_tbl\n  country_names &lt;- gt:::country_names\n\n  x_str &lt;- character(length(x))\n  x_str_non_missing &lt;- x[!is.na(x)]\n  x_str_non_missing &lt;- vapply(\n    seq_along(x_str_non_missing),\n    FUN.VALUE = character(1L),\n    USE.NAMES = FALSE,\n    FUN = function(x) {\n      if (grepl(\",\", x_str_non_missing[x], fixed = TRUE)) {\n        countries &lt;- toupper(unlist(strsplit(x_str_non_missing[x], \",\\\\s*\")))\n      } else {\n        countries &lt;- toupper(x_str_non_missing[x])\n      }\n      if (is.numeric(height)) {\n        height &lt;- paste0(height, \"px\")\n      }\n      out &lt;- c()\n      for (y in seq_along(countries)) {\n        country_i &lt;- toupper(countries[y])\n        country_i_len &lt;- nchar(country_i)\n        flag_svg &lt;- flag_tbl[\n          flag_tbl[[paste0(\"country_code_\", country_i_len)]] == country_i,\n        ][[\"country_flag\"]]\n        out_y &lt;- gsub(\n          \"&lt;svg.*?&gt;\",\n          paste0(\n            \"&lt;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" \",\n            \"aria-hidden=\\\"true\\\" role=\\\"img\\\" \",\n            \"width=\\\"512\\\" height=\\\"512\\\" \",\n            \"viewBox=\\\"0 0 512 512\\\" \",\n            \"style=\\\"vertical-align:-0.125em;\",\n            \"image-rendering:optimizeQuality;\",\n            \"height:\",\n            height,\n            \";\",\n            \"width:\",\n            height,\n            \";\",\n            \"\\\"\",\n            \"&gt;\"\n          ),\n          flag_svg\n        )\n        out &lt;- c(out, out_y)\n      }\n      paste0(\n        \"&lt;span style=\\\"white-space:nowrap;\\\"&gt;\",\n        paste0(out, collapse = \"\"),\n        \"&lt;/span&gt;\"\n      )\n    }\n  )\n  x_str[!is.na(x)] &lt;- x_str_non_missing\n  x_str[is.na(x)] &lt;- NA_character_\n  x_str\n}\n\ngt_tbl &lt;- tbl |&gt;\n  mutate(across(everything(), \\(x) as.character(x))) |&gt;\n  mutate(\n    origin_info = if (origin_plausible == 0 & is.na(origin_airports_name)) {\n      as.character(html(glue(\n        \"{fa('triangle-exclamation', fill = '#990000')} Unable to Determine\"\n      )))\n    } else if (origin_plausible == 0) {\n      as.character(html(glue(\n        \"{fa('triangle-exclamation', fill = '#990000')} {origin_airports_name} {get_flag(origin_airports_countryiso2)}\"\n      )))\n    } else {\n      as.character(html(glue(\n        \"{origin_airports_iata} - {origin_airports_name} {get_flag(origin_airports_countryiso2)}\"\n      )))\n    }\n  ) |&gt;\n  mutate(\n    destination_info = if (\n      destination_plausible == 0 & is.na(destination_airports_name)\n    ) {\n      as.character(html(glue(\n        \"{fa('triangle-exclamation', fill = '#990000')} Unable to Determine\"\n      )))\n    } else if (destination_plausible == 0) {\n      as.character(html(glue(\n        \"{fa('triangle-exclamation', fill = '#990000')} {destination_airports_name} {get_flag(destination_airports_countryiso2)}\"\n      )))\n    } else {\n      as.character(html(glue(\n        \"{destination_airports_iata} - {destination_airports_name} {get_flag(destination_airports_countryiso2)}\"\n      )))\n    }\n  ) |&gt;\n  mutate(velocity = glue(\"{velocity} m/s\")) |&gt;\n  mutate(true_track = glue(\"{true_track} degrees\")) |&gt;\n  mutate(vertical_rate = glue(\"{vertical_rate} m/s\")) |&gt;\n  mutate(baro_altitude = glue(\"{baro_altitude} m\")) |&gt;\n  mutate(\n    amenity_ife = case_when(\n      ife == \"NO\" ~ NA,\n      str_detect(ife, \"No \") ~ NA,\n      str_detect(ife, \"AVOD|DTV\") & str_detect(ife, \"PDE\") ~\n        glue(\n          '{web_image(\"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\")} {web_image(\"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\")}'\n        ),\n      str_detect(ife, \"AVOD|DTV\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"Seatback|SEATBACK\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"PDE\") ~\n        web_image(\n          \"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\"\n        )\n    )\n  ) |&gt;\n  mutate(\n    amenity_wifi = case_when(\n      wifi == \"NO\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/4d2b44a2bcff27d9/original/x-global-icons-travel-airport-wifi.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      power == \"NO\" ~ NA,\n      power == \"F/E+\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/3acf299d26de7a3b/original/x-global-icons-travel-airport-in-seat-power.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      str_detect(power, \"USB\") ~\n        glue(\n          \"{amenity_power} {web_image('https://media.united.com/assets/m/601a3d239d42470/original/USB-icon.svg')}\"\n        ),\n      .default = amenity_power\n    )\n  ) |&gt;\n  mutate(\n    amenities = glue(\"{amenity_wifi} {amenity_power} {amenity_ife}\", .na = \"\")\n  ) |&gt;\n  select(\n    registration,\n    aircraft_model,\n    delivered,\n    config,\n    amenities,\n    velocity,\n    true_track,\n    vertical_rate,\n    baro_altitude,\n    squawk,\n    special_purpose,\n    origin_info,\n    destination_info\n  ) |&gt;\n  rename(\n    \"Registration Number\" = registration,\n    \"Aircraft Model\" = aircraft_model,\n    \"Delivery Year\" = delivered,\n    \"Seating Configuration\" = config,\n    \"Amenities On-Board\" = amenities,\n    \"Velocity\" = velocity,\n    \"Climb Rate\" = vertical_rate,\n    \"True Track\" = true_track,\n    \"Barometric Altitude\" = baro_altitude,\n    \"Squawk Code\" = squawk,\n    \"Special Purpose Flight\" = special_purpose,\n    \"Origin Airport\" = origin_info,\n    \"Destination Airport\" = destination_info\n  ) |&gt;\n  pivot_longer(everything()) |&gt;\n  mutate(\n    category = case_match(\n      name,\n      \"Registration Number\" ~ \"Aircraft Information\",\n      \"Aircraft Model\" ~ \"Aircraft Information\",\n      \"Delivery Year\" ~ \"Aircraft Information\",\n      \"Seating Configuration\" ~ \"Aircraft Information\",\n      \"Amenities On-Board\" ~ \"Aircraft Information\",\n      \"Velocity\" ~ \"Operational Information\",\n      \"True Track\" ~ \"Operational Information\",\n      \"Climb Rate\" ~ \"Operational Information\",\n      \"Barometric Altitude\" ~ \"Operational Information\",\n      \"Squawk Code\" ~ \"Operational Information\",\n      \"Special Purpose Flight\" ~ \"Operational Information\",\n      \"Origin Airport\" ~ \"Route Information\",\n      \"Destination Airport\" ~ \"Route Information\"\n    )\n  ) |&gt;\n  group_by(category) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = html(glue(\n      \"{united_logo} &lt;b&gt;{callsign}&lt;/b&gt;&lt;br&gt;{web_image(aircraftimg, height = '9em')}\"\n    )),\n    subtitle = html(glue(\n      \"{bslib::layout_column_wrap(origin_value_box, dest_value_box)}{reliability}&lt;br&gt;Data as of {contact} UTC\"\n    ))\n  ) |&gt;\n  tab_options(table.width = pct(100), container.width = pct(100)) |&gt;\n  tab_source_note(\n    \"Information sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\"\n  ) |&gt;\n  tab_footnote(\n    \"J = United Polaris seats; F = First Class; PP = Premium Plus; E+ = Economy Plus; Y = Economy.\",\n    locations = cells_body(\n      columns = name,\n      rows = name == \"Seating Configuration\"\n    )\n  ) |&gt;\n  fmt_markdown() |&gt;\n  tab_style(\n    list(\n      cell_text(weight = 500, color = \"#FFFFFF\"),\n      cell_fill(color = \"#000000\")\n    ),\n    list(cells_row_groups())\n  ) |&gt;\n  tab_options(column_labels.hidden = TRUE)\n\ngt_tbl\n\n\n\n\n\n\n\n\n\n\n\n UAL2353\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAircraft Velocity\n\n267.79 m/s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAltitude\n\n10668 meters\n\n\n\n\n\n\n\n\n\n\n\nRoute data for UAL2353 is unreliable. Operational information is displayed instead.\nData as of 2025-10-01 23:05:56 UTC\n\n\n\n\nAircraft Information\n\n\nRegistration Number\nN17309\n\n\nAircraft Model\nBoeing 737 MAX 8\n\n\nDelivery Year\n2023\n\n\nSeating Configuration1\n16F/54E+/96Y\n\n\nAmenities On-Board\n  \n\n\nOperational Information\n\n\nVelocity\n267.79 m/s\n\n\nTrue Track\n112.48 degrees\n\n\nClimb Rate\n0 m/s\n\n\nBarometric Altitude\n10668 m\n\n\nSquawk Code\nNA\n\n\nSpecial Purpose Flight\nFALSE\n\n\nRoute Information\n\n\nOrigin Airport\n\n\n\n\n\nGeorge Bush Intercontinental Houston Airport\n\n\n\n\n\n\n\nDestination Airport\n\n\n\n\n\nPiarco International Airport\n\n\n\n\n\n\n\n\n1 J = United Polaris seats; F = First Class; PP = Premium Plus; E+ = Economy Plus; Y = Economy.\n\n\nInformation sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\nSome tricks that I’ll draw your attention to: remember the value boxes? You might be wondering how I got those in there. I took this line of the value box code cell:\nlayout_column_wrap(origin_value_box, dest_value_box)\n… and shoved it into gt’s tab_header() function under subtitle, using html() and glue(), like so:\n... |&gt;\n  tab_header(\n    title = html(glue(\n      \"{united_logo} &lt;b&gt;{callsign}&lt;/b&gt;&lt;br&gt;{web_image(aircraftimg, height = '9em')}\"\n    )),\n    subtitle = html(glue(\n      \"{bslib::layout_column_wrap(origin_value_box, dest_value_box)}{reliability}&lt;br&gt;Data as of {contact} UTC\"\n    ))\n  )\nAs you can see in the cell above, we also embellished the callsign with a United logo on its left, using the object united_logo which, again, relies on United’s CDN to serve up that image. In addition to the value boxes, we added the reliability object underneath the boxes, documenting when we’ve decided to omit or display route info.\nNow, we’re ready to wrap this in a function. Really, it’s almost ready to go. Notice that united_10_gt currently contains only one row. The table handles one aircraft at a time, so we’ll need to add a filter to a given callsign, and pass a vector of callsigns using map():\ntbl &lt;- df |&gt; filter(callsign == specified_callsign)\nWe might as well add an option for exporting to HTML that defaults to true as well. Doing that, we get the full function called generate_map_tables:\ngenerate_map_tables &lt;- function(df, specified_callsign, output_html = TRUE) {\n  tbl &lt;- df |&gt; filter(callsign == specified_callsign)\n\n  aircraftimg &lt;- tbl$aircraft_image\n  aircraftmodel &lt;- tbl$aircraft_model\n\n  callsign &lt;- tbl$callsign\n  united_logo &lt;- web_image(\n    \"https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\",\n    height = \"1em\"\n  )\n\n  if (is.null(tbl$origin_plausible) | is.na(tbl$origin_plausible)) {\n    tbl$origin_plausible &lt;- 0\n  }\n\n  if (is.null(tbl$destination_plausible | is.na(tbl$destination_plausible))) {\n    tbl$destination_plausible &lt;- 0\n  }\n\n  ### Add fallbacks in case route data is inaccurate. API provides a 0/1 metric for plausibility.\n  if (tbl$origin_plausible == 1) {\n    origin_value_box &lt;- value_box(\n      value = tbl$origin_airports_iata,\n      title = html(glue(\n        \"{tbl$origin_airports_name}&lt;br&gt;{tbl$origin_airports_countryiso2}\"\n      )),\n      showcase = fa(\"plane-departure\", height = \"4.5em\"),\n      theme = value_box_theme(\"bg-gradient-blue-purple\")\n    )\n  } else {\n    origin_value_box &lt;- value_box(\n      value = glue(\"{tbl$velocity} m/s\"),\n      title = \"Aircraft Velocity\",\n      theme = value_box_theme(\"bg-gradient-blue-purple\"),\n      showcase = fa(\"angles-right\", height = \"3em\")\n    )\n  }\n  dest_value_box &lt;- if (tbl$destination_plausible == 1) {\n    value_box(\n      value = tbl$destination_airports_iata,\n      title = html(glue(\n        \"{tbl$destination_airports_name}&lt;br&gt;{tbl$destination_airports_countryiso2}\"\n      )),\n      showcase = fa(\"plane-arrival\", height = \"4.5em\"),\n      theme = value_box_theme(\"bg-gradient-blue-purple\")\n    )\n  } else {\n    dest_value_box &lt;- value_box(\n      value = glue(\"{tbl$baro_altitude} meters\"),\n      title = \"Altitude\",\n      theme = value_box_theme(\"bg-gradient-blue-purple\"),\n      showcase = if (tbl$vertical_rate &gt; 0) {\n        fa(\"angle-up\", height = \"3em\")\n      } else if (tbl$vertical_rate == 0) {\n        fa(\"minus\", fill = \"#FFFFFF\", \"3em\")\n      } else {\n        fa(\"angle-down\", height = \"3em\")\n      }\n    )\n  }\n\n  if (tbl$origin_plausible == 0 | tbl$destination_plausible == 0) {\n    reliability &lt;- glue(\n      \"{fa('triangle-exclamation', fill = '#990000')} &lt;b&gt;Route data for {callsign} is unreliable. Operational information is displayed instead.&lt;/b&gt;\"\n    )\n  } else {\n    reliability &lt;- glue(\n      \"{fa('triangle-exclamation', fill = '#FFB343')} &lt;b&gt;Route data for {callsign} is plausible, but may still be outdated/incorrect. Double check using other sources.&lt;/b&gt;\"\n    )\n  }\n\n  contact &lt;- tbl$last_contact\n\n  get_flag &lt;- function(x, height = \"1em\") {\n    flag_tbl &lt;- gt:::flag_tbl\n    country_names &lt;- gt:::country_names\n\n    x_str &lt;- character(length(x))\n    x_str_non_missing &lt;- x[!is.na(x)]\n    x_str_non_missing &lt;- vapply(\n      seq_along(x_str_non_missing),\n      FUN.VALUE = character(1L),\n      USE.NAMES = FALSE,\n      FUN = function(x) {\n        if (grepl(\",\", x_str_non_missing[x], fixed = TRUE)) {\n          countries &lt;- toupper(unlist(strsplit(x_str_non_missing[x], \",\\\\s*\")))\n        } else {\n          countries &lt;- toupper(x_str_non_missing[x])\n        }\n        if (is.numeric(height)) {\n          height &lt;- paste0(height, \"px\")\n        }\n        out &lt;- c()\n        for (y in seq_along(countries)) {\n          country_i &lt;- toupper(countries[y])\n          country_i_len &lt;- nchar(country_i)\n          flag_svg &lt;- flag_tbl[\n            flag_tbl[[paste0(\"country_code_\", country_i_len)]] == country_i,\n          ][[\"country_flag\"]]\n          out_y &lt;- gsub(\n            \"&lt;svg.*?&gt;\",\n            paste0(\n              \"&lt;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" \",\n              \"aria-hidden=\\\"true\\\" role=\\\"img\\\" \",\n              \"width=\\\"512\\\" height=\\\"512\\\" \",\n              \"viewBox=\\\"0 0 512 512\\\" \",\n              \"style=\\\"vertical-align:-0.125em;\",\n              \"image-rendering:optimizeQuality;\",\n              \"height:\",\n              height,\n              \";\",\n              \"width:\",\n              height,\n              \";\",\n              \"\\\"\",\n              \"&gt;\"\n            ),\n            flag_svg\n          )\n          out &lt;- c(out, out_y)\n        }\n        paste0(\n          \"&lt;span style=\\\"white-space:nowrap;\\\"&gt;\",\n          paste0(out, collapse = \"\"),\n          \"&lt;/span&gt;\"\n        )\n      }\n    )\n    x_str[!is.na(x)] &lt;- x_str_non_missing\n    x_str[is.na(x)] &lt;- NA_character_\n    x_str\n  }\n\n  gt_tbl &lt;- tbl |&gt;\n    mutate(across(everything(), \\(x) as.character(x))) |&gt;\n    mutate(\n      origin_info = if (origin_plausible == 0 & is.na(origin_airports_name)) {\n        as.character(html(glue(\n          \"{fa('triangle-exclamation', fill = '#990000')} Unable to Determine\"\n        )))\n      } else if (origin_plausible == 0) {\n        as.character(html(glue(\n          \"{fa('triangle-exclamation', fill = '#990000')} {origin_airports_name} {get_flag(origin_airports_countryiso2)}\"\n        )))\n      } else {\n        as.character(html(glue(\n          \"{origin_airports_iata} - {origin_airports_name} {get_flag(origin_airports_countryiso2)}\"\n        )))\n      }\n    ) |&gt;\n    mutate(\n      destination_info = if (\n        destination_plausible == 0 & is.na(destination_airports_name)\n      ) {\n        as.character(html(glue(\n          \"{fa('triangle-exclamation', fill = '#990000')} Unable to Determine\"\n        )))\n      } else if (destination_plausible == 0) {\n        as.character(html(glue(\n          \"{fa('triangle-exclamation', fill = '#990000')} {destination_airports_name} {get_flag(destination_airports_countryiso2)}\"\n        )))\n      } else {\n        as.character(html(glue(\n          \"{destination_airports_iata} - {destination_airports_name} {get_flag(destination_airports_countryiso2)}\"\n        )))\n      }\n    ) |&gt;\n    mutate(velocity = glue(\"{velocity} m/s\")) |&gt;\n    mutate(true_track = glue(\"{true_track} degrees\")) |&gt;\n    mutate(vertical_rate = glue(\"{vertical_rate} m/s\")) |&gt;\n    mutate(baro_altitude = glue(\"{baro_altitude} m\")) |&gt;\n    mutate(\n      amenity_ife = case_when(\n        ife == \"NO\" ~ NA,\n        str_detect(ife, \"No \") ~ NA,\n        str_detect(ife, \"AVOD|DTV\") & str_detect(ife, \"PDE\") ~\n          glue(\n            '{web_image(\"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\")} {web_image(\"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\")}'\n          ),\n        str_detect(ife, \"AVOD|DTV\") ~\n          web_image(\n            \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n          ),\n        str_detect(ife, \"Seatback|SEATBACK\") ~\n          web_image(\n            \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n          ),\n        str_detect(ife, \"PDE\") ~\n          web_image(\n            \"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\"\n          )\n      )\n    ) |&gt;\n    mutate(\n      amenity_wifi = case_when(\n        wifi == \"NO\" ~ NA,\n        .default = web_image(\n          \"https://media.united.com/assets/m/4d2b44a2bcff27d9/original/x-global-icons-travel-airport-wifi.svg\"\n        )\n      )\n    ) |&gt;\n    mutate(\n      amenity_power = case_when(\n        power == \"NO\" ~ NA,\n        power == \"F/E+\" ~ NA,\n        .default = web_image(\n          \"https://media.united.com/assets/m/3acf299d26de7a3b/original/x-global-icons-travel-airport-in-seat-power.svg\"\n        )\n      )\n    ) |&gt;\n    mutate(\n      amenity_power = case_when(\n        str_detect(power, \"USB\") ~\n          glue(\n            \"{amenity_power} {web_image('https://media.united.com/assets/m/601a3d239d42470/original/USB-icon.svg')}\"\n          ),\n        .default = amenity_power\n      )\n    ) |&gt;\n    mutate(\n      amenities = glue(\"{amenity_wifi} {amenity_power} {amenity_ife}\", .na = \"\")\n    ) |&gt;\n    select(\n      registration,\n      aircraft_model,\n      delivered,\n      config,\n      amenities,\n      velocity,\n      true_track,\n      vertical_rate,\n      baro_altitude,\n      squawk,\n      special_purpose,\n      origin_info,\n      destination_info\n    ) |&gt;\n    rename(\n      \"Registration Number\" = registration,\n      \"Aircraft Model\" = aircraft_model,\n      \"Delivery Year\" = delivered,\n      \"Seating Configuration\" = config,\n      \"Amenities On-Board\" = amenities,\n      \"Velocity\" = velocity,\n      \"Climb Rate\" = vertical_rate,\n      \"True Track\" = true_track,\n      \"Barometric Altitude\" = baro_altitude,\n      \"Squawk Code\" = squawk,\n      \"Special Purpose Flight\" = special_purpose,\n      \"Origin Airport\" = origin_info,\n      \"Destination Airport\" = destination_info\n    ) |&gt;\n    pivot_longer(everything()) |&gt;\n    mutate(\n      category = case_match(\n        name,\n        \"Registration Number\" ~ \"Aircraft Information\",\n        \"Aircraft Model\" ~ \"Aircraft Information\",\n        \"Delivery Year\" ~ \"Aircraft Information\",\n        \"Seating Configuration\" ~ \"Aircraft Information\",\n        \"Amenities On-Board\" ~ \"Aircraft Information\",\n        \"Velocity\" ~ \"Operational Information\",\n        \"True Track\" ~ \"Operational Information\",\n        \"Climb Rate\" ~ \"Operational Information\",\n        \"Barometric Altitude\" ~ \"Operational Information\",\n        \"Squawk Code\" ~ \"Operational Information\",\n        \"Special Purpose Flight\" ~ \"Operational Information\",\n        \"Origin Airport\" ~ \"Route Information\",\n        \"Destination Airport\" ~ \"Route Information\"\n      )\n    ) |&gt;\n    group_by(category) |&gt;\n    gt() |&gt;\n    tab_header(\n      title = html(glue(\n        \"{united_logo} &lt;b&gt;{callsign}&lt;/b&gt;&lt;br&gt;{web_image(aircraftimg, height = '9em')}\"\n      )),\n      subtitle = html(glue(\n        \"{bslib::layout_column_wrap(origin_value_box, dest_value_box)}{reliability}&lt;br&gt;Data as of {contact} UTC\"\n      ))\n    ) |&gt;\n    tab_options(table.width = pct(100), container.width = pct(100)) |&gt;\n    tab_source_note(\n      \"Information sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\"\n    ) |&gt;\n    fmt_markdown() |&gt;\n    tab_style(\n      list(\n        cell_text(weight = 500, color = \"#FFFFFF\"),\n        cell_fill(color = \"#000000\")\n      ),\n      list(cells_row_groups())\n    ) |&gt;\n    tab_options(column_labels.hidden = TRUE)\n\n  if (output_html) {\n    gt_tbl &lt;- gt_tbl |&gt; as_raw_html()\n  }\n\n  return(gt_tbl)\n}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Who Invited a Map to the Table Contest?</span>"
    ]
  },
  {
    "objectID": "map_tables.html#sec-map-table",
    "href": "map_tables.html#sec-map-table",
    "title": "5  Who Invited a Map to the Table Contest?",
    "section": "",
    "text": "origin_info will concatenate a bunch of info about the origin airport into a single string, so it can be displayed in the table as one cell. That way, the user can still see the origin airport, even if it’s not included in the value box due to being unreliable (it may, in fact, be correct, so it’s worth showing). If we can’t determine the airport (for reasons listed in Section 2.1.2), we’ll put “Unable to Determine.” And we’ll do the same thing for destination_info\n\n\n\n\n\nIt’d be nice to list some aircraft amenities with little logos like the Wi-Fi on-board symbol, power adapter, in-flight entertainment symbol, etc. We’ll do the same process of piggybacking off of United’s CDN for this. If we detect certain strings in the United fleet data, such as “AVOD” or “DTV”, written as \"AVOD|DTV\", we’ll mutate a variable, let’s called it amenity_ife, so that it contains an SVG converted into HTML using gt’s web_image function, and otherwise we’ll leave it blank. We’ll do this for all the amenity types: amenity_ife, amenity_wifi, and amenity_power, then combine them into a single amenities column.\n\n\n\nLet’s add some formatting to our pre-existing columns before passing them into gt:\n\n\n\nLet’s make sure to update our selections. We might as well rename our columns to something nicer to look at as well, instead of these default names like vertical_rate. Note that we could change these later with some gt functions. It’s just a matter of preference. I’m more used to doing it in dplyr personally.\n\n\n\nMaybe we also want to add some row group labels. What do I mean by that? Here’s a picture of the anatomy of a table from the gt package:\n\n\n\nEasy enough, to do this all we’d need to do is create a grouping column. Once we use group(), gt will recognize our row groups and add the row group labels accordingly.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Who Invited a Map to the Table Contest?</span>"
    ]
  },
  {
    "objectID": "map_tables.html#map-it",
    "href": "map_tables.html#map-it",
    "title": "5  Who Invited a Map to the Table Contest?",
    "section": "5.2 Map It!",
    "text": "5.2 Map It!\nI recognize this isn’t a mapping contest (maybe someone needs to get on that idea). Still, if the whole point is putting a table inside a map, I kind of need to walk you through the mapping part a little bit. Alright, let’s grab our parquet files we made in Section 3.1.\n\nunited_10_tracks &lt;- st_read_parquet(\"data/flight_track.parquet\")\nunited_10_positions &lt;- st_read_parquet(\"data/state_vector.parquet\")\n\n\n\n\n\n\n\nImportant\n\n\n\nBefore I go further, in the actual project, you’ll use the functions we created in Section 3.1 to query the OpenSky API and build the tracks/positions objects. That looks like this:\n\nunited_explore_10 &lt;-\n  compatible_registrations |&gt;\n  slice_sample(n = 10) |&gt;\n  pull(icao24)\n\nunited_10_tracks &lt;- bind_rows(\n  map(united_explore_10, \\(x) get_flight_track(x))\n) |&gt;\n  st_as_sf()\n\nunited_10_positions &lt;- bind_rows(\n  map(united_explore_10, \\(x) get_state_vector(x))\n) |&gt;\n  mutate(\n    registration = map_chr(icao24, \\(x) {\n      get_registration_from_icao24(x, return_tibble = F)\n    })\n  ) |&gt;\n  st_as_sf()\n\nunited_explore_10 simply picks 10 random flights to query from the compatible_registrations list, which we made in Section 4.1. That’s because, up until we made that list, we didn’t actually have the information necessary to comprehensively pull from United’s active mainline fleet. And the reason we’re only pulling 10 is further documented in Section 2.1.1, but basically the long-and-short is we have limited API credits, and we can’t just pull the whole fleet, so a random sample of 10 is the compromise I landed on. The API limit is also why I’m demonstrating/executing the code using static parquet files here in Quarto. You’re free to adjust this as you like, just make sure to change the slice_sample(n = 10) row, or, if you’re feeling adventurous, delete it entirely I guess. As they say, enjoy responsibly.\n\n\nLet’s make sure that everything in tracks is actually also in positions, since we’ll assign the tooltip/hover functionality to positions, and not tracks:\n\nunited_10_tracks &lt;- united_10_tracks |&gt;\n  filter(icao24 %in% (united_10_positions |&gt; drop_na(time) |&gt; pull(icao24)))\n\nGetting registration info so we can join united_10_positions with our fleet information:\n\nunited_10_positions &lt;- united_10_positions |&gt;\n  mutate(\n    registration = map_chr(icao24, \\(x) {\n      get_registration_from_icao24(x, return_tibble = F)\n    })\n  ) |&gt;\n  st_as_sf()\n\nDoing some joins on united_10_positions to join it up with route and fleet data and creating a separate united_10_gt object that’s a little cleaned up for use with gt…\n\nunited_10_positions &lt;- left_join(\n  united_10_positions |&gt;\n    mutate(baro_altitude = st_coordinates(united_10_positions)[, 3]),\n  united_full_fleet_info\n)\n\nJoining with `by = join_by(registration)`\n\nroute_info &lt;- bind_rows(\n  map(united_10_positions |&gt; drop_na(callsign) |&gt; pull(callsign), \\(x) {\n    get_route_information(x)\n  })\n)\nunited_10_positions &lt;- left_join(united_10_positions, route_info) |&gt;\n  drop_na(callsign)\n\nJoining with `by = join_by(callsign)`\n\nunited_10_gt &lt;- united_10_positions |&gt; as_tibble() |&gt; drop_na(callsign)\n\n… we’ve finally arrived at the mapping function itself:\n\nunited_10_gt &lt;- united_10_gt |&gt;\n  mutate(\n    gt_html = map_chr(callsign, \\(x) generate_map_tables(df = united_10_gt, x))\n  ) |&gt;\n  select(callsign, gt_html)\n\nGreat. Let’s join this to our positions data and make sure it’s a simple features object:\n\nunited_10_positions_gt &lt;- left_join(united_10_positions, united_10_gt) |&gt;\n  st_as_sf()\n\nJoining with `by = join_by(callsign)`\n\n\nNow we can finally map it!\nTo initialize a Maplibre map (after you’ve gotten the mapgl package), we’ll call the maplibre() function. We’ll set the projection to globe using set_projection(\"globe\"), add our data sources using add_source(), add a little airplane icon for use with our symbol layer with add_image(), add a line layer with add_line_layer(), add a symbol layer with add_symbol_layer(), add a fullscreen control with add_fullscreen_control(), and add a reset control with add_reset_control().\n\nlibrary(mapgl)\n\nmaplibre(\n  style = carto_style(\"dark-matter\"),\n  bounds = united_10_tracks,\n  height = \"100vh\",\n  attributionControl = list(\n    customAttribution = \"&lt;a href='https://sites.google.com/site/unitedfleetsite/mainline-fleet-tracking'&gt;United Fleet Site project contributors&lt;/a&gt;, OpenSky Network contributors, adsb.lol, ADSB-DB\",\n    compact = TRUE\n  )\n) |&gt;\n  set_projection(\"globe\") |&gt;\n  add_source(id = \"paths\", data = united_10_tracks) |&gt;\n  add_source(id = \"positions\", data = united_10_positions_gt) |&gt;\n  add_image(\n    \"aircraft-icon\",\n    \"https://upload.wikimedia.org/wikipedia/commons/1/10/Avatar_plane.png\"\n  ) |&gt;\n  add_line_layer(\n    id = \"flight-tracks\",\n    source = \"paths\",\n    line_color = \"#1414D2\",\n    line_width = 3\n  ) |&gt;\n  add_symbol_layer(\n    id = \"aircraft-positions\",\n    source = \"positions\",\n    icon_rotate = get_column(\"true_track\"),\n    icon_image = \"aircraft-icon\",\n    icon_size = interpolate(\n      property = \"zoom\",\n      values = c(4, 8, 12),\n      stops = c(0.15, 0.25, 0.4)\n    ),\n    icon_allow_overlap = TRUE,\n    popup = \"gt_html\",\n    tooltip = \"gt_html\",\n    icon_rotation_alignment = \"map\",\n    icon_pitch_alignment = \"map\"\n  ) |&gt;\n  add_fullscreen_control() |&gt;\n  add_reset_control()\n\n\n\n\n\nA few notes about the parameters here:\n\nTo get the maps to actually show up, I specified popup = \"gt_html\" and tooltip = \"gt_html\" inside add_symbol_layer()\nTo get the aircraft icons to point in the right direction, I used icon_rotate = get_column(\"true_track\") as well as icon_rotation_alignment = \"map\" and icon_pitch_alignment = \"map\" so that the icons actually keep their rotation, even if the user starts rotating the map.\nThis block:\n\n\nicon_size = interpolate(\n  property = \"zoom\",\n  values = c(4, 8, 12),\n  stops = c(0.15, 0.25, 0.4)\n)\n\n… scales the aircraft icon depending on zoom level. And the attributionControl argument in maplibre() is used to credit the data sources.\nIt’s worth noting something important here: your pop-up will probably look like this,\n\nWhy? Because I’ve set you up for failure Because of Maplibre’s default CSS rules. We actually need to create an scss file that overrides some of these rules. For my contest entry, I have my scss looking something like this (for the pop-up scaling specifically):\n\nbody .maplibregl-popup {\n    max-width: 80vw !important; // Default for mobile and small screens (&lt;901px)\n    max-height: 70vh !important;\n    z-index: 1200;\n}\n\n// Rule for displays between 901px and 1351px\n@media screen and (min-width: 901px) and (max-width: 1351px) {\n    body .maplibregl-popup {\n        max-width: 60vw !important; // Larger on \"tablet\" and medium desktop displays\n    }\n}\n\n// Rule for large displays (&gt;1351px)\n@media screen and (min-width: 1352px) {\n    body .maplibregl-popup {\n        max-width: 40vw !important; // Smaller on large desktop displays\n    }\n}\n\nbody .maplibregl-popup-content {\n    overflow-x: auto !important;\n    overflow-y: auto !important;\n}\n\n\n… with @media screen being used to scale the width of the pop-up to different display sizes, using a mobile first approach (greater width on smaller screens to try and get the map as large as possible).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Who Invited a Map to the Table Contest?</span>"
    ]
  },
  {
    "objectID": "map_tables.html#sec-many-tables",
    "href": "map_tables.html#sec-many-tables",
    "title": "5  Who Invited a Map to the Table Contest?",
    "section": "5.3 One Last Table - Well, Actually, a Table of Tables",
    "text": "5.3 One Last Table - Well, Actually, a Table of Tables\nRemember the compromise I discussed in Section 2.1.1 about not being able to show the entire fleet? The compromise I landed on is showing a few planes in the air, and then showing details about all the active aircraft in United’s fleet based on the Google sheet we pulled on a separate page called “Full Fleet Information” on my Shiny app. You’re actually well equipped to recreate just about the entire table given what we learned from the map table, which is debatably more complicated than this one. The interactive full fleet table is more straightforward, leveraging the aircraft images and seatmaps we pulled from United’s CDN.\nLet’s try a quick prototype, pulling 5 random rows from the United fleet (I’d rather not display all 1,000 here and wait several minutes for my computer to render the table, especially on the later steps…). We’ll involve some gtExtras as well, specifically the merge stack function.\n\nlibrary(gtExtras)\n\nmain_tbl &lt;- united_full_fleet_info |&gt;\n  slice_sample(n = 5) |&gt;\n  filter(str_starts(registration, \"N\")) |&gt;\n  mutate(aircraft_seatmap = web_image(aircraft_seatmap, height = \"30em\")) |&gt;\n  mutate(\n    amenity_ife = case_when(\n      ife == \"NO\" ~ NA,\n      str_detect(ife, \"No \") ~ NA,\n      str_detect(ife, \"AVOD|DTV\") & str_detect(ife, \"PDE\") ~\n        glue(\n          '{web_image(\"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\")} {web_image(\"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\")}'\n        ),\n      str_detect(ife, \"AVOD|DTV\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"Seatback|SEATBACK\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"PDE\") ~\n        web_image(\n          \"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\"\n        )\n    )\n  ) |&gt;\n  mutate(\n    amenity_wifi = case_when(\n      wifi == \"NO\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/4d2b44a2bcff27d9/original/x-global-icons-travel-airport-wifi.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      power == \"NO\" ~ NA,\n      power == \"F/E+\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/3acf299d26de7a3b/original/x-global-icons-travel-airport-in-seat-power.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      str_detect(power, \"USB\") ~\n        glue(\n          \"{amenity_power} {web_image('https://media.united.com/assets/m/601a3d239d42470/original/USB-icon.svg')}\"\n        ),\n      .default = amenity_power\n    )\n  ) |&gt;\n  mutate(\n    amenities = glue(\"{amenity_wifi} {amenity_power} {amenity_ife}\", .na = \"\")\n  ) |&gt;\n  select(-amenity_wifi, -amenity_power, -amenity_ife)\n\nunited_logo &lt;- web_image(\n  \"https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\",\n  height = \"1em\"\n)\n\nmain_tbl &lt;- main_tbl |&gt;\n  select(\n    delivered,\n    aircraft_image,\n    aircraft_model,\n    aircraft_seatmap,\n    amenities,\n    J,\n    F,\n    PP,\n    `E+`,\n    Y\n  ) |&gt;\n  mutate(across(c(\"J\", \"F\", \"PP\", \"E+\", \"Y\"), \\(x) as.integer(x))) |&gt;\n  mutate(\"Total Seats\" = sum(c(J, F, PP, `E+`, Y), na.rm = T)) |&gt;\n  gt() |&gt;\n  fmt_image(columns = aircraft_image, height = \"22em\") |&gt;\n  gt_merge_stack(\n    col1 = aircraft_image,\n    col2 = aircraft_model,\n    font_size = c(\"14px\", \"18px\"),\n    palette = c(\"black\", \"black\"),\n    font_weight = c(\"bold\", \"normal\")\n  ) |&gt;\n  gt_merge_stack(col1 = aircraft_image, col2 = aircraft_seatmap) |&gt;\n  cols_width(aircraft_image ~ px(1200)) |&gt;\n  cols_align(align = \"center\", columns = aircraft_image) |&gt;\n  cols_label(\n    delivered = \"Delivery Year\",\n    aircraft_image = \"Aircraft\"\n  ) |&gt;\n  tab_style(\n    cell_borders(sides = c(\"bottom\"), weight = px(1.2), style = \"dashed\"),\n    cells_body()\n  ) |&gt;\n  tab_style(\n    list(\n      cell_fill(color = \"#000000\"),\n      cell_text(\n        color = \"#FFFFFF\",\n        weight = 400,\n        stretch = \"semi-condensed\",\n        size = \"large\"\n      )\n    ),\n    locations = cells_body(columns = delivered)\n  ) |&gt;\n  tab_options(table.width = pct(100), container.width = pct(100)) |&gt;\n  tab_source_note(\n    \"Information sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\"\n  ) |&gt;\n  opt_interactive(\n    use_search = TRUE,\n    page_size_values = c(5, 10, 25),\n    page_size_default = 5,\n    use_filters = TRUE\n  )\n\nmain_tbl\n\n\n\n\n\n\n\nInformation sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\n\n\n\n\n\n\n\n\nI mean, this is alright. A Quarto book won’t do it justice since it’s necessarily crammed into the small space. Still, though, it feels like we’re going to struggle with a lot of vertical whitespace due to the combination of the aircraft and the seatmap, which generally make the most visual sense when they’re sitting together vertically. Hmm… what if we took a bunch of these columns and turned them into rows? As in, have a bunch of tiny cells, and one big, merged cell next to them? You might think that gt wasn’t really built for something like that. And you’d probably be right. But, just like in the maps, gt tables can be output into HTML. And just like mapgl, gt can render HTML using fmt_markdown().\nLet’s take the same approach as our map. For every observation (aircraft registration value), we’ll create a vertically-oriented table that contains:\n\nthe aircraft’s registration information in the tab_header();\nthe aircraft information, in a category called “Aircraft Information,” which contains the aircraft model and layout;\nthe amenities on-board the aircraft, in a category called “Amenities On-Board,” containing amenity logos like in our map table, as well as the specific in-flight entertainment type, Wi-Fi system, and power available;\nthe seating available on board the aircraft, by class;\nand the total number of seats at the bottom.\n\n\ngenerate_addt_info_table &lt;- function(df, specified_registration) {\n  tbl &lt;- df |&gt; filter(registration == specified_registration)\n\n  tbl |&gt;\n    select(\n      aircraft_model,\n      config,\n      amenities,\n      ife,\n      wifi,\n      power,\n      J,\n      F,\n      PP,\n      `E+`,\n      Y\n    ) |&gt;\n    mutate(across(c(\"J\", \"F\", \"PP\", \"E+\", \"Y\"), \\(x) as.integer(x))) |&gt;\n    mutate(\"Total Seats\" = sum(c(J, F, PP, `E+`, Y), na.rm = T)) |&gt;\n    mutate(across(everything(), \\(x) as.character(x))) |&gt;\n    rename(\n      \"Aircraft Model\" = aircraft_model,\n      Layout = config,\n      \"Amenities\" = amenities,\n      \"In-Flight Entertainment\" = ife,\n      \"Wi-Fi System\" = wifi,\n      \"Power Available\" = power,\n      \"Polaris Seats\" = J,\n      \"First Class Seats\" = F,\n      \"Premium Plus Seats\" = PP,\n      \"Economy Plus Seats\" = `E+`,\n      \"Economy Seats\" = Y\n    ) |&gt;\n    pivot_longer(everything()) |&gt;\n    mutate(\n      category = case_match(\n        name,\n        \"Aircraft Model\" ~ \"Aircraft Information\",\n        \"Layout\" ~ \"Aircraft Information\",\n        \"Amenities\" ~ \"Amenities On-Board\",\n        \"In-Flight Entertainment\" ~ \"Amenities On-Board\",\n        \"Wi-Fi System\" ~ \"Amenities On-Board\",\n        \"Power Available\" ~ \"Amenities On-Board\",\n        \"Polaris Seats\" ~ \"Seating\",\n        \"First Class Seats\" ~ \"Seating\",\n        \"Premium Plus Seats\" ~ \"Seating\",\n        \"Economy Plus Seats\" ~ \"Seating\",\n        \"Economy Seats\" ~ \"Seating\",\n        \"Total Seats\" ~ \"Seating\"\n      )\n    ) |&gt;\n    group_by(category) |&gt;\n    gt() |&gt;\n    tab_options(column_labels.hidden = TRUE) |&gt;\n    fmt_markdown() |&gt;\n    sub_missing() |&gt;\n    tab_header(title = specified_registration) |&gt;\n    tab_style(\n      list(\n        cell_text(weight = 400, color = \"#FFFFFF\"),\n        cell_fill(color = \"#000000\")\n      ),\n      list(cells_row_groups(), cells_body(rows = name == \"Total Seats\"))\n    ) |&gt;\n    tab_options(table.width = pct(90), table.border.top.style = \"hidden\") |&gt;\n    data_color(\n      rows = category == \"Seating\" & name != \"Total Seats\",\n      palette = \"ggsci::indigo_material\",\n      columns = value,\n      na_color = \"#FFFFFF\"\n    ) |&gt;\n    as_raw_html()\n}\n\nLet’s add this into our full fleet table using the following line:\n\n... |&gt;\n  mutate(\n    amenity_table = map(registration, \\(x) {\n      generate_addt_info_table(main_tbl, x)\n    })\n  )\n\n\nmain_tbl &lt;- united_full_fleet_info |&gt;\n  filter(str_starts(registration, \"N\")) |&gt;\n  slice_sample(n = 5) |&gt;\n  mutate(aircraft_seatmap = web_image(aircraft_seatmap, height = \"30em\")) |&gt;\n  mutate(\n    amenity_ife = case_when(\n      ife == \"NO\" ~ NA,\n      str_detect(ife, \"No \") ~ NA,\n      str_detect(ife, \"AVOD|DTV\") & str_detect(ife, \"PDE\") ~\n        glue(\n          '{web_image(\"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\")} {web_image(\"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\")}'\n        ),\n      str_detect(ife, \"AVOD|DTV\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"Seatback|SEATBACK\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"PDE\") ~\n        web_image(\n          \"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\"\n        )\n    )\n  ) |&gt;\n  mutate(\n    amenity_wifi = case_when(\n      wifi == \"NO\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/4d2b44a2bcff27d9/original/x-global-icons-travel-airport-wifi.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      power == \"NO\" ~ NA,\n      power == \"F/E+\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/3acf299d26de7a3b/original/x-global-icons-travel-airport-in-seat-power.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      str_detect(power, \"USB\") ~\n        glue(\n          \"{amenity_power} {web_image('https://media.united.com/assets/m/601a3d239d42470/original/USB-icon.svg')}\"\n        ),\n      .default = amenity_power\n    )\n  ) |&gt;\n  mutate(\n    amenities = glue(\"{amenity_wifi} {amenity_power} {amenity_ife}\", .na = \"\")\n  ) |&gt;\n  select(-amenity_wifi, -amenity_power, -amenity_ife)\n\nunited_logo &lt;- web_image(\n  \"https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\",\n  height = \"1em\"\n)\n\nmain_tbl &lt;- main_tbl |&gt;\n  mutate(\n    amenity_table = map(registration, \\(x) {\n      generate_addt_info_table(main_tbl, x)\n    })\n  ) |&gt;\n  select(\n    delivered,\n    aircraft_image,\n    aircraft_model,\n    aircraft_seatmap,\n    amenity_table\n  ) |&gt;\n  gt() |&gt;\n  fmt_image(columns = aircraft_image, height = \"22em\") |&gt;\n  gt_merge_stack(\n    col1 = aircraft_image,\n    col2 = aircraft_model,\n    font_size = c(\"14px\", \"18px\"),\n    palette = c(\"black\", \"black\"),\n    font_weight = c(\"bold\", \"normal\")\n  ) |&gt;\n  gt_merge_stack(col1 = aircraft_image, col2 = aircraft_seatmap) |&gt;\n  cols_move(columns = aircraft_image, after = amenity_table) |&gt;\n  cols_width(amenity_table ~ px(450), aircraft_image ~ px(1200)) |&gt;\n  cols_align(align = \"center\", columns = aircraft_image) |&gt;\n  cols_label(\n    delivered = \"Delivery Year\",\n    amenity_table = \"\",\n    aircraft_image = \"Aircraft\"\n  ) |&gt;\n  tab_style(\n    cell_borders(sides = c(\"bottom\"), weight = px(1.2), style = \"dashed\"),\n    cells_body()\n  ) |&gt;\n  tab_style(\n    list(\n      cell_fill(color = \"#000000\"),\n      cell_text(\n        color = \"#FFFFFF\",\n        weight = 400,\n        stretch = \"semi-condensed\",\n        size = \"large\"\n      )\n    ),\n    locations = cells_body(columns = delivered)\n  ) |&gt;\n  tab_options(table.width = pct(100), container.width = pct(100)) |&gt;\n  tab_source_note(\n    \"Information sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\"\n  ) |&gt;\n  opt_interactive(\n    use_search = TRUE,\n    page_size_values = c(5, 10, 25),\n    page_size_default = 5,\n    use_filters = TRUE\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(c(\"J\", \"F\", \"PP\", \"E+\", \"Y\"), function(x)\n  as.integer(x))`.\nCaused by warning:\n! There was 1 warning in `mutate()`.\nℹ In argument: `across(c(\"J\", \"F\", \"PP\", \"E+\", \"Y\"), function(x)\n  as.integer(x))`.\nCaused by warning:\n! NAs introduced by coercion\n\nmain_tbl\n\n\n\n\n\n\n\nInformation sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\n\n\n\n\n\n\n\n\nThat’s a lot better. But I have no idea what some of these IFE/Wi-Fi options mean. Maybe we can fix that with bslib::tooltip() and text_replace()?\nLet’s try adding these lines:\n\nife_learn_more &lt;- glue(\"In-Flight Entertainment {fa('circle-question')}\")\nwifi_learn_more &lt;- glue(\"Wi-Fi System {fa('circle-question')}\")\npower_learn_more &lt;- glue(\"Power Available {fa('circle-question')}\")\n\n... |&gt;\n  text_replace(\n    \"In-Flight Entertainment\",\n    glue(\n      '{bslib::tooltip(\n      html(ife_learn_more),\n      \"Abbreviations: Audio-Video on Demand (AVOD), AVOD with overhead television monitors in economy (AVOD/OVER), Personal Device Entertainment via the United app (PDE), DirecTV (DTV). F/E+ indicates that this amenity is only available in First or Economy Plus; in this case, the amenity is omitted from the icon list as it is not available to all passengers.\"\n    )}'\n    )\n  ) |&gt;\n  text_replace(\n    \"Wi-Fi System\",\n    glue(\n      '{bslib::tooltip(\n      html(wifi_learn_more),\n      \"Abbreviations: Satellite (Satl), Ku (Ku-band satellite frequency), Ka (Ka-band satellite frequency). F/E+ indicates that this amenity is only available in First or Economy Plus; in this case, the amenity is omitted from the icon list as it is not available to all passengers.\"\n    )}'\n    )\n  ) |&gt;\n  text_replace(\n    \"Power Available\",\n    glue(\n      '{bslib::tooltip(\n      html(power_learn_more),\n      \"Numerical values represent volts. USB indicates that USB power (either type-A or type-C) is available. F/E+ indicates that this amenity is only available in First or Economy Plus; in this case, the amenity is omitted from the icon list as it is not available to all passengers.\"\n    )}'\n    )\n  )\n\n\ngenerate_addt_info_table &lt;- function(df, specified_registration) {\n  tbl &lt;- df |&gt; filter(registration == specified_registration)\n\n  ife_learn_more &lt;- glue(\"In-Flight Entertainment {fa('circle-question')}\")\n  wifi_learn_more &lt;- glue(\"Wi-Fi System {fa('circle-question')}\")\n  power_learn_more &lt;- glue(\"Power Available {fa('circle-question')}\")\n\n  tbl |&gt;\n    select(\n      aircraft_model,\n      config,\n      amenities,\n      ife,\n      wifi,\n      power,\n      J,\n      F,\n      PP,\n      `E+`,\n      Y\n    ) |&gt;\n    mutate(across(c(\"J\", \"F\", \"PP\", \"E+\", \"Y\"), \\(x) as.integer(x))) |&gt;\n    mutate(\"Total Seats\" = sum(c(J, F, PP, `E+`, Y), na.rm = T)) |&gt;\n    mutate(across(everything(), \\(x) as.character(x))) |&gt;\n    rename(\n      \"Aircraft Model\" = aircraft_model,\n      Layout = config,\n      \"Amenities\" = amenities,\n      \"In-Flight Entertainment\" = ife,\n      \"Wi-Fi System\" = wifi,\n      \"Power Available\" = power,\n      \"Polaris Seats\" = J,\n      \"First Class Seats\" = F,\n      \"Premium Plus Seats\" = PP,\n      \"Economy Plus Seats\" = `E+`,\n      \"Economy Seats\" = Y\n    ) |&gt;\n    pivot_longer(everything()) |&gt;\n    mutate(\n      category = case_match(\n        name,\n        \"Aircraft Model\" ~ \"Aircraft Information\",\n        \"Layout\" ~ \"Aircraft Information\",\n        \"Amenities\" ~ \"Amenities On-Board\",\n        \"In-Flight Entertainment\" ~ \"Amenities On-Board\",\n        \"Wi-Fi System\" ~ \"Amenities On-Board\",\n        \"Power Available\" ~ \"Amenities On-Board\",\n        \"Polaris Seats\" ~ \"Seating\",\n        \"First Class Seats\" ~ \"Seating\",\n        \"Premium Plus Seats\" ~ \"Seating\",\n        \"Economy Plus Seats\" ~ \"Seating\",\n        \"Economy Seats\" ~ \"Seating\",\n        \"Total Seats\" ~ \"Seating\"\n      )\n    ) |&gt;\n    group_by(category) |&gt;\n    gt() |&gt;\n    tab_options(column_labels.hidden = TRUE) |&gt;\n    fmt_markdown() |&gt;\n    sub_missing() |&gt;\n    tab_header(title = specified_registration) |&gt;\n    tab_style(\n      list(\n        cell_text(weight = 400, color = \"#FFFFFF\"),\n        cell_fill(color = \"#000000\")\n      ),\n      list(cells_row_groups(), cells_body(rows = name == \"Total Seats\"))\n    ) |&gt;\n    tab_options(table.width = pct(90), table.border.top.style = \"hidden\") |&gt;\n    text_replace(\n      \"In-Flight Entertainment\",\n      glue(\n        '{bslib::tooltip(\n      html(ife_learn_more),\n      \"Abbreviations: Audio-Video on Demand (AVOD), AVOD with overhead television monitors in economy (AVOD/OVER), Personal Device Entertainment via the United app (PDE), DirecTV (DTV). F/E+ indicates that this amenity is only available in First or Economy Plus; in this case, the amenity is omitted from the icon list as it is not available to all passengers.\"\n    )}'\n      )\n    ) |&gt;\n    text_replace(\n      \"Wi-Fi System\",\n      glue(\n        '{bslib::tooltip(\n      html(wifi_learn_more),\n      \"Abbreviations: Satellite (Satl), Ku (Ku-band satellite frequency), Ka (Ka-band satellite frequency). F/E+ indicates that this amenity is only available in First or Economy Plus; in this case, the amenity is omitted from the icon list as it is not available to all passengers.\"\n    )}'\n      )\n    ) |&gt;\n    text_replace(\n      \"Power Available\",\n      glue(\n        '{bslib::tooltip(\n      html(power_learn_more),\n      \"Numerical values represent volts. USB indicates that USB power (either type-A or type-C) is available. F/E+ indicates that this amenity is only available in First or Economy Plus; in this case, the amenity is omitted from the icon list as it is not available to all passengers.\"\n    )}'\n      )\n    ) |&gt;\n    data_color(\n      rows = category == \"Seating\" & name != \"Total Seats\",\n      palette = \"ggsci::indigo_material\",\n      columns = value,\n      na_color = \"#FFFFFF\"\n    ) |&gt;\n    as_raw_html()\n}\n\n\nmain_tbl &lt;- united_full_fleet_info |&gt;\n  filter(str_starts(registration, \"N\")) |&gt;\n  slice_sample(n = 5) |&gt;\n  mutate(aircraft_seatmap = web_image(aircraft_seatmap, height = \"30em\")) |&gt;\n  mutate(\n    amenity_ife = case_when(\n      ife == \"NO\" ~ NA,\n      str_detect(ife, \"No \") ~ NA,\n      str_detect(ife, \"AVOD|DTV\") & str_detect(ife, \"PDE\") ~\n        glue(\n          '{web_image(\"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\")} {web_image(\"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\")}'\n        ),\n      str_detect(ife, \"AVOD|DTV\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"Seatback|SEATBACK\") ~\n        web_image(\n          \"https://media.united.com/assets/m/6902cf38052408ed/original/x-global-icons-travel-airport-on-demand.svg\"\n        ),\n      str_detect(ife, \"PDE\") ~\n        web_image(\n          \"https://media.united.com/assets/m/36ec366e93188fda/original/x-global-icons-travel-airport-personal-device.svg\"\n        )\n    )\n  ) |&gt;\n  mutate(\n    amenity_wifi = case_when(\n      wifi == \"NO\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/4d2b44a2bcff27d9/original/x-global-icons-travel-airport-wifi.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      power == \"NO\" ~ NA,\n      power == \"F/E+\" ~ NA,\n      .default = web_image(\n        \"https://media.united.com/assets/m/3acf299d26de7a3b/original/x-global-icons-travel-airport-in-seat-power.svg\"\n      )\n    )\n  ) |&gt;\n  mutate(\n    amenity_power = case_when(\n      str_detect(power, \"USB\") ~\n        glue(\n          \"{amenity_power} {web_image('https://media.united.com/assets/m/601a3d239d42470/original/USB-icon.svg')}\"\n        ),\n      .default = amenity_power\n    )\n  ) |&gt;\n  mutate(\n    amenities = glue(\"{amenity_wifi} {amenity_power} {amenity_ife}\", .na = \"\")\n  ) |&gt;\n  select(-amenity_wifi, -amenity_power, -amenity_ife)\n\nunited_logo &lt;- web_image(\n  \"https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\",\n  height = \"1em\"\n)\n\nmain_tbl &lt;- main_tbl |&gt;\n  mutate(\n    amenity_table = map(registration, \\(x) {\n      generate_addt_info_table(main_tbl, x)\n    })\n  ) |&gt;\n  select(\n    delivered,\n    aircraft_image,\n    aircraft_model,\n    aircraft_seatmap,\n    amenity_table\n  ) |&gt;\n  gt() |&gt;\n  fmt_image(columns = aircraft_image, height = \"22em\") |&gt;\n  gt_merge_stack(\n    col1 = aircraft_image,\n    col2 = aircraft_model,\n    font_size = c(\"14px\", \"18px\"),\n    palette = c(\"black\", \"black\"),\n    font_weight = c(\"bold\", \"normal\")\n  ) |&gt;\n  gt_merge_stack(col1 = aircraft_image, col2 = aircraft_seatmap) |&gt;\n  cols_move(columns = aircraft_image, after = amenity_table) |&gt;\n  cols_width(amenity_table ~ px(450), aircraft_image ~ px(1200)) |&gt;\n  cols_align(align = \"center\", columns = aircraft_image) |&gt;\n  cols_label(\n    delivered = \"Delivery Year\",\n    amenity_table = \"\",\n    aircraft_image = \"Aircraft\"\n  ) |&gt;\n  tab_style(\n    cell_borders(sides = c(\"bottom\"), weight = px(1.2), style = \"dashed\"),\n    cells_body()\n  ) |&gt;\n  tab_style(\n    list(\n      cell_fill(color = \"#000000\"),\n      cell_text(\n        color = \"#FFFFFF\",\n        weight = 400,\n        stretch = \"semi-condensed\",\n        size = \"large\"\n      )\n    ),\n    locations = cells_body(columns = delivered)\n  ) |&gt;\n  tab_options(table.width = pct(100), container.width = pct(100)) |&gt;\n  tab_source_note(\n    \"Information sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\"\n  ) |&gt;\n  opt_interactive(\n    use_search = TRUE,\n    page_size_values = c(5, 10, 25),\n    page_size_default = 5,\n    use_filters = TRUE\n  )\n\nmain_tbl\n\n\n\n\n\n\n\nInformation sourced from the OpenSky Network, adsb.lol, ADSB-DB, and the United Fleet Website's mainline fleet tracker. Information, especially route information, may be inaccurate, and is omitted from the table header when unreliable. Table design by Martin Stavro. Information displayed here, including the medium in which it is displayed, is not affiliated with nor endorsed by United Airlines and is presented here within the provisions of fair use.\n\n\n\n\n\n\n\n\nAwesome. I think we’re ready to move onto the final step: deploying our work!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Who Invited a Map to the Table Contest?</span>"
    ]
  },
  {
    "objectID": "map_tables.html#footnotes",
    "href": "map_tables.html#footnotes",
    "title": "5  Who Invited a Map to the Table Contest?",
    "section": "",
    "text": "You might be wondering what the point of even putting it into the coordinates was in the first place. Originally, I thought I’d be able to map the z-offset, until I learned it’s a Mapbox only feature, and Mapbox has its own API/cost requirements. So, for those of you using Mapbox, the option is still there with the z-offset argument.↩︎",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Who Invited a Map to the Table Contest?</span>"
    ]
  },
  {
    "objectID": "deployment.html",
    "href": "deployment.html",
    "title": "6  Deploying via GitHub Actions",
    "section": "",
    "text": "6.1 Putting into Quarto and Styling\nWe’re at the last part. We laugh, we cried, we made some friends along the way - okay, we didn’t do any of that. We did make a lot of tables, though. Now all that’s left is sharing them with the world.\nBefore we talk about GitHub pages, you’re going to want to put the pieces we’ve assembled in the previous chapters into a Quarto document - specifically, the web development pieces that came out of Section 5.1 and Section 5.3. I’ve got an example for you to use here.\nAnother interject: I neglected to share some styling things to spruce up your dashboard before deployment. I mentioned SCSS rules in Section 5.1, but here’s the full SCSS you might want to have:\nAdditionally, you might want to use a _brand.yml file mimicking your airline of choice. Here’s mine for United:\nFinally, you’re probably going to want a _quarto.yml file for your project. I’ll get to that below.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Deploying via GitHub Actions</span>"
    ]
  },
  {
    "objectID": "deployment.html#putting-into-quarto-and-styling",
    "href": "deployment.html#putting-into-quarto-and-styling",
    "title": "6  Deploying via GitHub Actions",
    "section": "",
    "text": "$navbar-bg: black;\n$navbar-fg: white;\n\n/*-- scss:rules --*/\n// CSS rules for styling go here\n// Scale pop-up for different displays\nbody .maplibregl-popup {\n    max-width: 80vw !important; // Default for mobile and small screens (&lt;901px)\n    max-height: 70vh !important;\n    z-index: 1200;\n}\n\n// Rule for displays between 901px and 1351px\n@media screen and (min-width: 901px) and (max-width: 1351px) {\n    body .maplibregl-popup {\n        max-width: 60vw !important; // Larger on \"tablet\" and medium desktop displays\n    }\n}\n\n// Rule for large displays (&gt;1351px)\n@media screen and (min-width: 1352px) {\n    body .maplibregl-popup {\n        max-width: 40vw !important; // Smaller on large desktop displays\n    }\n}\n\nbody .maplibregl-popup-content {\n    overflow-x: auto !important;\n    overflow-y: auto !important;\n}\n\nmeta:\n  name: United Airlines\n  link: https://www.united.com\n    \nlogo: \n  images:\n    united-logo:\n      path: \"https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\"\n      alt: \"United Airlines\"\n  small: united-logo\n  medium: united-logo\n  large: united-logo\n\ncolor:\n  palette:\n    blue: \"#1414D2\"\n  primary: blue\n  secondary: white",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Deploying via GitHub Actions</span>"
    ]
  },
  {
    "objectID": "deployment.html#sec-deployment",
    "href": "deployment.html#sec-deployment",
    "title": "6  Deploying via GitHub Actions",
    "section": "6.2 Setting up GitHub Pages and GitHub Actions",
    "text": "6.2 Setting up GitHub Pages and GitHub Actions\nI guess it’s worth talking about the strategies of deployment quickly. Side note that Hadley Wickham has a book-in-progress on this and you should probably read it, because what I’m about to give you is the cliff-notes version of a workshop based on said book.\nBasically, the first step we should think about when we think through deployment is longevity - i.e., managing package versions. We’ve got three options for this:\n\nYOLO: just send it up on GitHub or Posit Connect or whatever with whatever pak pulls\nPack and ship: use rsconnect::manifest(), which works really well with Posit tools and is really elegant and frankly a really good plug for Posit solutions.\nFreeze it: use renv to lock everything.\n\nWe’re going to use YOLO, because in the workshop it had a cool picture of a guy hang gliding but also because the packages we use are stable enough for present purposes. Moreover, we are also constantly building our app, and pak/GitHub will package lock our builds at the time of compilation. Moreover moreover, it fits with our current approach of using CDNs and connections to online resources whenever we can. I don’t recommend this necessarily if you want an app that you’re sure won’t suffer from a breaking change. The converse of that is your app won’t benefit from improvements/new functionality introduced into packages that take effect natively. So your mileage will vary here.\nTo continuously integrate and deploy (CI/CD!) our app, we’re going to need a few things:\n\nGitHub Pages\nA GitHub action to render and deploy our index.qmd to pages\nA GitHub action to pull the United fleet Google Sheet every so often in case United takes new deliveries (or some planes go inactive)\n\n\n6.2.1 GitHub Pages\nI’m assuming you have GitHub initialized. If you don’t, start with this in the console while in your project directory:\nusethis::use_github()\nBefore you go any further, remember when we introduced some secrets in Section 3.1.3? Yeah, we’re probably going to want to tell GitHub about those. It’s okay, I don’t think GitHub is interested in telling everyone your secrets.1 Navigate to your repository, then go to “Settings”, and go to “Secrets and Variables.” You’re going to want to add two repository secrets, one called OPENSKY_CLIENT_ID and the other OPENSKY_CLIENT_SECRET, corresponding to your ID and SECRET in your credentials.json/.Renviron from earlier.\n\n\n\n\n\n\n\nReminder that if you change your secret for whatever reason, change it in the repo. Else you’ll be stuck frustrated for at least 2-3 hours like me wondering why your deployment isn’t working, only to remember that you rotated your secret.\n\n\n\nAnd before you go any further again, you’re going to likely want a _quarto.yml file for your project, even if it’s just a standalone page/dashboard. You don’t need this; you’re able to deploy individual sites without a _quarto.yml file. Speaking from experience, though, the _quarto.yml file makes your life a bit easier because it enables you to use the Quarto publish workflow:\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\nIf you’re not sure how to set up a _quarto.yaml, in this case it can be as simple as this:\nproject:\n  type: website \n\nwebsite:\n  title: \"Posit Table Contest\"\n  favicon: https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\nYou can then set up pages:\nusethis::use_github_pages()\n… and run this command in the terminal:\nquarto publish gh-pages\nYour Quarto doc will render for its initial deployment to pages. If you’re overly eager like me, you might’ve changed your “Pages” setting to “Deploy from GitHub Actions” - change it back to “Deploy from a branch” if that’s the case, and make sure it’s deploying from “gh-pages” (unless you changed the defaults set by use_github_pages()).\nAfter the initial render, you should have your first deployment! Hooray! But how do we get it to continuously deploy? Enter GitHub actions.\nI’ve set up an action file called render.yml, which looks something like this:\nname: Pull flights, render, and publish\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\npermissions:\n  contents: write\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Install quarto\n      - uses: quarto-dev/quarto-actions/setup@v2\n          \n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\nAnd the anatomy of this action is as such:\nname: Pull flights, render, and publish\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\npermissions:\n  contents: write\nname: a name for the action that shows up in GitHub\non: creates the conditions under which the action runs: - The workflow activates every 30 minutes (you can use crontab.guru for help writing cron jobs) - The workflow activates on a workflow dispatch button which appears in GitHub under the “Actions” section of your repository - Gives the action write permissions, which allows it to write the changes to GitHub pages\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Install quarto\n      - uses: quarto-dev/quarto-actions/setup@v2\n          \n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\njobs: actually specifies what’s going to take place: - The “runner”, aka, the Microsoft Azure Ubuntu Linux container running the job, will grab your repo and start working on it - The runner will install R - The runner will then set up dependencies (packages) based on what it detects in your scripts - The runner will set up Quarto - Finally, the runner will render your Quarto document, and publish to GitHub pages, because you have specified:\n        with:\n          target: gh-pages\nAdditionally, your runner will actually be able to render your document because you’ve supplied:\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\n\n6.2.1.1 Troubleshooting\nChances are, you’re going to run into some obstacles. I hope that providing you with the .yml will mitigate this somewhat, but here’s some general notes about failed deployments using this code:\n\nSome failed deployments are normal. The solution proposed in Section 2.1.1 relies, partly, on chance, in the sense that you’ll actually pull live aircraft. You may very well pull a segment of aircraft that are all sitting on the ground in a given moment. In this case, the Quarto script fails on purpose because there’s nothing to visualize. And it’s entirely possible that you could have long stints where you pull nothing, just because you’re pulling the wrong aircraft on the network. The best solution here is just to take a larger cross section of aircraft, perhaps trading off on the refresh period (i.e., 30/40 aircraft every hour, on the hour).\nYou rotated your credentials and forgot to update them (me).\nYou haven’t successfully rendered the Quarto page at least once locally with usethis::use_gh_pages()\n\nThe best advice for troubleshooting is to check the logs by going to your repo, going to “Actions,” and clicking on a failed deployment. Here’s an example:\n\nHere, tbl$destination_plausible is missing, likely because no aircraft were returned from our API functions. Similar errors include errors thrown by st_as_sf() about the absence of geometries and left_join() about a lack of columns to join, likely due to a missing table.\n\n\n\n6.2.2 Updating Fleet Info\nThe last piece is automatically refreshing the fleet info from Google Sheets. We’ll use a separate actions .yml file for that called update_ua_fleet.yml.\nname: Check for changes to the United mainline fleet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 12 * * *'\n\npermissions:\n  contents: write\n\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Execute the script\n      - name: Query changes to United fleet and update active registrations\n        run: Rscript rebuild_fleet_info.R\n\n      # Commit changes to csv back to the repo\n      - uses: stefanzweifel/git-auto-commit-action@v5\nLet’s walk through this one like the last:\nname: Check for changes to the United mainline fleet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 12 * * *'\n\npermissions:\n  contents: write\nname: sets the name we see in GitHub for this action.\non: does the following:\n\nlets us trigger the action using the workflow dispatch button in actions\nruns this job at 12:05 UTC daily\n\npermissions: enables the runner to write; specifically, it’ll write \"data/united_full_fleet_info.csv\" and \"\"data/compatible_registrations.csv\"\"\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Execute the script\n      - name: Query changes to United fleet and update active registrations\n        run: Rscript rebuild_fleet_info.R\n\n      # Commit changes to csv back to the repo\n      - uses: stefanzweifel/git-auto-commit-action@v5\njobs: everything’s the same here with the exception of the last two:\n\nrun: Rscript rebuild_fleet_info.R will run our R script\nuses: stefanzweifel/git-auto-commit-action@v5 will commit the changes the runner makes, i.e., writing the updated CSVs, to the repo\n\n… and that should be all you need to know on the deployment side! You can create these actions by going to the Actions tab under your repo.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Deploying via GitHub Actions</span>"
    ]
  },
  {
    "objectID": "deployment.html#footnotes",
    "href": "deployment.html#footnotes",
    "title": "6  Deploying via GitHub Actions",
    "section": "",
    "text": "In fact, there are some limited things GitHub does to prevent you from accidentally leaking a secret, but if you’re really determined, then GitHub’s not going to be able to stop you.↩︎",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Deploying via GitHub Actions</span>"
    ]
  }
]