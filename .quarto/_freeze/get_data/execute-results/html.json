{
  "hash": "1409c3a73d4adf9028ca19e74b816223",
  "result": {
    "engine": "knitr",
    "markdown": "# Actually Getting Flight Data (feat. httr2) {#sec-get-data}\nAlright, I've talked your ear off (typed your eyes off?) about the project background and the mental model framing my development approach. This section actually walks you through some code! For this section, we'll be putting all of our code into an R script called ```support_functions.R```\n\n## Interacting with APIs {#sec-api}\nThere are many methods of interacting with APIs, but for this project I'll be using httr2. For a comprehensive rundown of httr2, [nothing replaces the docs](https://httr2.r-lib.org/), but I'll give a quick rundown of some overarching principles before we set up our data pipelines.\n\nA request in httr2 generally starts like this:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"httr2\")\nlibrary(httr2)\n\nreq <- request(\"https://some_example.com\")\n```\n:::\n\n\n... where some_example.com is the base URL forming all API requests. For the OpenSky network, the root of the REST API is ```https://opensky-network.org/api```, though you could also set up the request using a specific endpoint as the base_url as well, for example, ```https://opensky-network.org/api/states/all?```\n\nThe next function following ```request()``` is usually what the request needs to pass to the API. In this project, I use the following request varieties:\n\n- ```req_url_query()```: forms API requests where the API roughly takes on the form of ```variable=value```, i.e., ```https://opensky-network.org/api/states/all?icao24=abcdefg```\n- ```req_url_path_append()```: for when you simply need to append something to the end of the base URL, i.e., ```https://api.adsbdb.com/v0/n-number/```\n- ```req_body_json()```: for when you need to pass information in a JSON to an API\n\nThese are chained together using the pipe operator like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequest(url) |> req_url_query()\n```\n:::\n\n\nWe then perform the request by chaining ```req_perform()``` onto it. Once we use ```req_perform()```, our request is sent! But we still need to extract our data from the request. For that, we'll use one of httr2's functions starting with *resp*. In this project, I only use one type:\n\n- ```resp_body_json()```: returns the parsed JSON information from the httr2 response object\n\nFor the rest of this section, we'll be building functions so we can send httr2 requests and get data back for our aircraft, thereby building the pipeline to supply our tables with new information updated at regular intervals throughout the day.\n\n### Interacting with the ADSBDB API {#sec-adsbdb}\nWe'll start with the most straightforward API to work with: the ADSBDB API. The ADSBDB API doesn't require any authentication and simply requires us to append some information onto a few base URLs. Among other things, the ADSBDB API allows us to switch between icao24 (or Mode-S) identification information and registration numbers, which is important for us to construct a list of aircraft from the United Fleet Google Sheet that we can check against the OpenSky API, since the OpenSky API only takes icao24 addresses.\n\nLet's start by reading through the ADSBDB API documentation for going from registration values to icao24 values.\n\n![](assets\\adsbdb_registration_icao.png)\n\nOkay, so we've got the base URL, ```https://api.adsbdb.com/v0/```, the endpoint, ```n_number/```, and what we'll query by, the registration, denoted by ```[N-NUMBER]```.\n\nTo keep it simple, we'll just treat the URL up to ```n_number/``` as the base URL when passing our url argument to ```request()```. Since the registration number is simply appended to the base URL in this case, we'll use ```req_url_path_append()```. We will wrap our httr2 request in a function. Why? So we can programmatically use our HTTP request to the RESTful API across multiple aircraft using functions like ```map()``` later on. Let's name the function something so we can easily remember what it does; maybe ```get_icao24_from_registration```? And let's call the variable we're passing registration, since that's what ```[N_NUMBER]``` serves as a stand-in for. Doing that gives us something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\n\nget_icao24_from_registration <- function(registration) {\n  icao24 <- request(\"https://api.adsbdb.com/v0/n-number/\") |>\n    req_url_path_append(registration) |>\n    req_perform() |>\n    resp_body_json()\n\n  return(icao24)\n}\n```\n:::\n\n\nAlright, let's try it on registration number N37502:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_icao24_from_registration(\"N37502\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$response\n[1] \"A448D1\"\n```\n\n\n:::\n:::\n\n\nThis is a good start. But we might want the results to come out directly instead of being nested behind ```$response```. We can change the return to ```return(icao24$response)``` to do that. We might also want to return the results in a tibble, so we can easily use the ```bind_rows()``` function from dplyr in combination with ```map()``` later to combine a bunch of results. \n\nIn order to use ```map()```, we might also want to add some error handling to our function. Seeing that ADSBDB is being continuously updated to improve its coverage of registrations to icao24 values, there may be some gaps in the data, causing the function to error out if we input a registration that hasn't been included in the database. There are several methods to deal with this, including the use of ```possibly()``` and ```safely()```, though I chose to use ```tryCatch()``` in combination with the ```logger``` package to emit an error log.\n\nLet's put all these suggestions into practice. First, we'll add the ability to export the result we want, ```icao24$response```, as a tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_icao24_from_registration <- function(registration, return_tibble = TRUE) {\n  icao24 <- request(\"https://api.adsbdb.com/v0/n-number/\") |>\n    req_url_path_append(registration) |>\n    req_perform() |>\n    resp_body_json()\n\n  if (return_tibble) {\n    return(as_tibble(icao24$response) |> rename(icao24 = value))\n  } else {\n    return(icao24$response)\n  }\n}\n```\n:::\n\n\nNext, we'll wrap that in ```tryCatch()```, emitting a ```log_error()``` whenever icao24 information isn't found on a given registration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(logger)\n\nget_icao24_from_registration <- function(registration, return_tibble = TRUE) {\n  tryCatch(\n    {\n      icao24 <- request(\"https://api.adsbdb.com/v0/n-number/\") |>\n        req_url_path_append(registration) |>\n        req_perform() |>\n        resp_body_json()\n\n      if (return_tibble) {\n        return(as_tibble(icao24$response) |> rename(icao24 = value))\n      } else {\n        return(icao24$response)\n      }\n    },\n    error = function(e) {\n      log_error(\"No icao24 information found for registration {registration}\")\n      return(NULL)\n    }\n  )\n}\n```\n:::\n\n\nAnd now we'll try outputting the result again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_icao24_from_registration(\"N37502\", return_tibble = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A448D1\"\n```\n\n\n:::\n:::\n\n\nVoila!\n\nI think it's useful to note things that I'd do differently if I had to do this again from scratch (now that I'm typing up this documentation after the fact). One thing I'd change is the error function in ```tryCatch()```. Reason being that I'm making a pretty substantial assumption here about the nature of the error, i.e., that the icao24/mode-S value doesn't exist, whereas the source of the error might be something different.\n\nAs such, I'd recommend doing something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(logger)\n\nget_icao24_from_registration <- function(registration, return_tibble = TRUE) {\n  tryCatch(\n    {\n      icao24 <- request(\"https://api.adsbdb.com/v0/n-number/\") |>\n        req_url_path_append(registration) |>\n        req_perform() |>\n        resp_body_json()\n\n      if (return_tibble) {\n        return(as_tibble(icao24$response) |> rename(icao24 = value))\n      } else {\n        return(icao24$response)\n      }\n    },\n    error = function(e) {\n      log_error(\"{registration} encountered error {e}\")\n      return(NULL)\n    }\n  )\n}\n\nget_icao24_from_registration(\"not a real registration\", return_tibble = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n... which returns ```NULL``` as seen above, but also prints this message to the console:\n\n```\nERROR [2025-09-30 20:03:09] not a real registration encountered error Error in `req_perform()`:\n! HTTP 400 Bad Request.\n```\n\n... and, in fact, I've gone back and made sure ```{e}``` is included in my ```log_error()``` calls where appropriate.\n\nWe might also want a reverse function that allows us to move from icao24 numbers to registration numbers. That's fairly easy, all we have to do is create a new function with a base URL hitting the endpoint ```mode_s``` and swap ```registration``` for ```icao24```. That looks like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_registration_from_icao24 <- function(icao24, return_tibble = TRUE) {\n  tryCatch(\n    {\n      registration <- request(\"https://api.adsbdb.com/v0/mode-s/\") |>\n        req_url_path_append(icao24) |>\n        req_perform() |>\n        resp_body_json()\n\n      if (return_tibble) {\n        return(as_tibble(registration$response) |> rename(registration = value))\n      } else {\n        return(registration$response)\n      }\n    },\n    error = function(e) {\n      log_error(\"{icao24} encountered error {e}\")\n      return(NULL)\n    }\n  )\n}\n```\n:::\n\n\nI'm storing these functions in a file called ```support_functions.R``` which I'll call later in my other scripts, just to keep them in a separate, single source of truth.\n\n### Interacting with the adsb.lol API\nThe adsb.lol is a little trickier but still fairly friendly. Instead of ```req_url_path_append()```, we've got to use ```req_body_json()```, since the adsb.lol's routeset endpoint only accepts requests formatted as JSON. Here's the schema from the docs:\n\n```\n{\n  \"planes\": [\n    {\n      \"callsign\": \"string\",\n      \"lat\": 0,\n      \"lng\": 0\n    }\n  ]\n}\n```\n\nOkay, a little daunting if you're not used to working with JSON - speaking for myself here! Luckily LLMs were a good tool that helped me tease this out. To prepare an R object for representation as JSON, we generally use ```list()```. Likely an oversimplifcation, but in this case, each set of braces {} and brackets [] roughly represents where we need to include ```list()```. Using that rule, our JSON setup should look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njson <- list(\n  planes = list(list(callsign = callsign, lat = 0, lng = 0))\n)\n```\n:::\n\n\n... where ```callsign``` is going to be the variable we use in a function. ```lat``` and ```lon``` are optional latitude and longitude parameters we won't concern ourselves with for the time being.\n\nAlright, so putting that together with what we've learned from working with ADSBDB, all we need to do is replace ```req_url_path_append()``` with ```req_body_json()``` and we should be good to go. Let's call this one ```get_route_information```.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_route_information <- function(callsign) {\n  json <- list(\n    planes = list(list(callsign = callsign, lat = 0, lng = 0))\n  )\n\n  route <- request(\"https://api.adsb.lol/api/0/routeset/\") |>\n    req_body_json(json) |>\n    req_perform() |>\n    resp_body_json()\n\n  return(route)\n}\n```\n:::\n\n\n... and let's try it with a random aircraft I pulled from the dashboard, N12003 operating as UAL881:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_route_information(\"UAL881\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]]$`_airport_codes_iata`\n[1] \"ORD-HND\"\n\n[[1]]$`_airports`\n[[1]]$`_airports`[[1]]\n[[1]]$`_airports`[[1]]$alt_feet\n[1] 672\n\n[[1]]$`_airports`[[1]]$alt_meters\n[1] 204.83\n\n[[1]]$`_airports`[[1]]$countryiso2\n[1] \"US\"\n\n[[1]]$`_airports`[[1]]$iata\n[1] \"ORD\"\n\n[[1]]$`_airports`[[1]]$icao\n[1] \"KORD\"\n\n[[1]]$`_airports`[[1]]$lat\n[1] 41.9786\n\n[[1]]$`_airports`[[1]]$location\n[1] \"Chicago\"\n\n[[1]]$`_airports`[[1]]$lon\n[1] -87.9048\n\n[[1]]$`_airports`[[1]]$name\n[1] \"Chicago O'Hare International Airport\"\n\n\n[[1]]$`_airports`[[2]]\n[[1]]$`_airports`[[2]]$alt_feet\n[1] 35\n\n[[1]]$`_airports`[[2]]$alt_meters\n[1] 10.67\n\n[[1]]$`_airports`[[2]]$countryiso2\n[1] \"JP\"\n\n[[1]]$`_airports`[[2]]$iata\n[1] \"HND\"\n\n[[1]]$`_airports`[[2]]$icao\n[1] \"RJTT\"\n\n[[1]]$`_airports`[[2]]$lat\n[1] 35.5523\n\n[[1]]$`_airports`[[2]]$location\n[1] \"Tokyo\"\n\n[[1]]$`_airports`[[2]]$lon\n[1] 139.78\n\n[[1]]$`_airports`[[2]]$name\n[1] \"Tokyo-Haneda International Airport\"\n\n\n\n[[1]]$airline_code\n[1] \"UAL\"\n\n[[1]]$airport_codes\n[1] \"KORD-RJTT\"\n\n[[1]]$callsign\n[1] \"UAL881\"\n\n[[1]]$number\n[1] \"881\"\n\n[[1]]$plausible\n[1] 0\n```\n\n\n:::\n:::\n\n\nYeah, that doesn't look very tidy. Well, they do say that most of data work is cleaning. Let's see if we can massage this a bit. Looks like everything is stored under ```[[1]]```, so let's get ```route[[1]]``` and try putting it into a tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(glue)\n\nget_route_information <- function(callsign) {\n  json <- list(\n    planes = list(list(callsign = callsign, lat = 0, lng = 0))\n  )\n\n  route <- request(\"https://api.adsb.lol/api/0/routeset/\") |>\n    req_body_json(json) |>\n    req_perform() |>\n    resp_body_json()\n\n  route <- route[[1]] |> as_tibble()\n\n  return(route)\n}\n\nget_route_information(\"UAL881\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 7\n  `_airport_codes_iata` `_airports`  airline_code airport_codes callsign number\n  <chr>                 <list>       <chr>        <chr>         <chr>    <chr> \n1 ORD-HND               <named list> UAL          KORD-RJTT     UAL881   881   \n2 ORD-HND               <named list> UAL          KORD-RJTT     UAL881   881   \n# ℹ 1 more variable: plausible <int>\n```\n\n\n:::\n:::\n\n\nBetter. But the shape isn't entirely correct. If we think a little bit farther ahead to how the other data might look, we want one observation, i.e., one row, per plane. We've got two rows here, one for each airport it looks like. In fact, sometimes this API will return a multi-leg route - i.e., three rows or more! These routes are generally more common for point-to-point airlines like Southwest than they are with hub-and-spoke airlines like United. For now, to deal with these uncertain cases, we'll plan on stopping the function entirely if there's more than two rows returned by route. \n\n::: {.callout}\nIn the future, one improvement would be to take the tracks provided by OpenSky and infer the departure airport based on spatial proximity using a spatial dataset of airports.\n:::\n\nFor now, we'll focus on two-leg routes. After grabbing ```route[[1]]```, we need to pull apart the first row (origin) and second row (destination). We've also got to do something about these named lists sitting under the ``` `_airports` ``` column. Let's try using ```unnest_wider()```, separating the names with an underscore. We're also going to try and bring these columns back together in a single row, so we've got to name them something different from one another. Let's append ```origin_``` to all columns in the object for the first row, and ```destination_``` to all columns in the object for the second row. Then, let's bind the columns using ```bind_cols()```.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_route_information <- function(callsign) {\n  json <- list(\n    planes = list(list(callsign = callsign, lat = 0, lng = 0))\n  )\n\n  route <- request(\"https://api.adsb.lol/api/0/routeset/\") |>\n    req_body_json(json) |>\n    req_perform() |>\n    resp_body_json()\n\n  route <- route[[1]] |> as_tibble()\n  if (nrow(route) > 2) {\n    stop(\n      \"Callsign has multiple routes or a multi-leg route. Unable to determine routing.\"\n    )\n  }\n  route_origin <- route[1, ] |>\n    unnest_wider(`_airports`, names_sep = \"_\") |>\n    rename_all(~ glue(\"origin_{.x}\"))\n  route_destination <- route[2, ] |>\n    unnest_wider(`_airports`, names_sep = \"_\") |>\n    rename_all(~ glue(\"destination_{.x}\"))\n\n  route <- bind_cols(route_origin, route_destination)\n\n  return(route_origin)\n}\n\nget_route_information(\"UAL881\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 15\n  origin__airport_codes_iata origin__airports_alt_feet origin__airports_alt_me…¹\n  <chr>                                          <dbl>                     <dbl>\n1 ORD-HND                                          672                      205.\n# ℹ abbreviated name: ¹​origin__airports_alt_meters\n# ℹ 12 more variables: origin__airports_countryiso2 <chr>,\n#   origin__airports_iata <chr>, origin__airports_icao <chr>,\n#   origin__airports_lat <dbl>, origin__airports_location <chr>,\n#   origin__airports_lon <dbl>, origin__airports_name <chr>,\n#   origin_airline_code <chr>, origin_airport_codes <chr>,\n#   origin_callsign <chr>, origin_number <chr>, origin_plausible <int>\n```\n\n\n:::\n:::\n\n\nAlright, just a few more things to take care of. Some of these columns now have a double underscore. Additionally, we don't have the callsign info anywhere in this tibble, so we'll need to mutate that in using ```mutate(callsign = callsign)```. Let's also add some error handling similar to the other functions, where an error returns a tibble in a similar schema filled with NAs, parsed down to only the columns used by table creation functions later in the project.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_route_information <- function(callsign) {\n  tryCatch(\n    {\n      json <- list(\n        planes = list(list(callsign = callsign, lat = 0, lng = 0))\n      )\n\n      route <- request(\"https://api.adsb.lol/api/0/routeset/\") |>\n        req_body_json(json) |>\n        req_perform() |>\n        resp_body_json()\n\n      route <- route[[1]] |> as_tibble()\n      if (nrow(route) > 2) {\n        stop(\n          \"Callsign has multiple routes or a multi-leg route. Unable to determine routing.\"\n        )\n      }\n      route_origin <- route[1, ] |>\n        unnest_wider(`_airports`, names_sep = \"_\") |>\n        rename_all(~ glue(\"origin_{.x}\"))\n      route_destination <- route[2, ] |>\n        unnest_wider(`_airports`, names_sep = \"_\") |>\n        rename_all(~ glue(\"destination_{.x}\"))\n\n      route <- bind_cols(route_origin, route_destination) |>\n        rename_all(~ str_replace_all(.x, \"__\", \"_\")) |>\n        mutate(callsign = callsign)\n\n      return(route)\n    },\n    error = function(e) {\n      log_error(\"Error getting route info for {callsign} {e}\")\n      route <- tibble(\n        origin_airports_iata = NA,\n        origin_airports_name = NA,\n        origin_airports_countryiso2 = NA,\n        origin_plausible = NA,\n        destination_airports_iata = NA,\n        destination_airports_name = NA,\n        destination_airports_countryiso2 = NA,\n        destination_plausible = NA,\n      )\n      return(route)\n    }\n  )\n}\n\nget_route_information(\"UAL881\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 31\n  origin_airport_codes_iata origin_airports_alt_feet origin_airports_alt_meters\n  <chr>                                        <dbl>                      <dbl>\n1 ORD-HND                                        672                       205.\n# ℹ 28 more variables: origin_airports_countryiso2 <chr>,\n#   origin_airports_iata <chr>, origin_airports_icao <chr>,\n#   origin_airports_lat <dbl>, origin_airports_location <chr>,\n#   origin_airports_lon <dbl>, origin_airports_name <chr>,\n#   origin_airline_code <chr>, origin_airport_codes <chr>,\n#   origin_callsign <chr>, origin_number <chr>, origin_plausible <int>,\n#   destination_airport_codes_iata <chr>, …\n```\n\n\n:::\n:::\n\n\nAnd here's our final product!\n\n### Interacting with the OpenSky API {#sec-opensky}\nEven though I've listed the OpenSky API last, it isn't really *that* daunting beyond authorizing your credentials. The authorization piece adds a little extra bit of complexity, but nothing we can't handle. As alluded to in @sec-tolled-boxes, the OpenSky API uses API credits as a way to deal with demand (among other things). For non-registered users, the limit is 400 credits a day, which roughly comes out to about 100 flights a day. That's not very much. Luckily, with a simple and *free* registration, we can get ourselves up to 4,000 credits a day, or 1,000 flights a day instead! \n\n#### Interacting as an Unauthenticated User\nI'll cover the unauthenticated piece first and provide more details about authentication in the next section. We might as well use up the 400 credits we get as an unauthorized user on messing around and actually getting our functions to work, since the 400 and 4,000 are separate limits. \n\nWe want both track and state vector data for a given aircraft, defined by an icao24 address. The base URLs for those endpoints are ```https://opensky-network.org/api/states/all?``` and ```https://opensky-network.org/api/tracks/all?```. Let's start with the track information first. Taking a look at the docs:\n\n![](assets/opensky_tracks.png)\n\nWe can see that our request needs to at least pass the property icao24. Time is optional, if we had information on when we thought the given icao24 code was in the air (i.e., a time between the start and end of a given flight). Since we don't have that information, we'll just pass the icao24 code in our request. To do that, we'll use ```req_url_query()```, which is structured in a ```variable = value``` pattern, and call this function ```get_flight_track```.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_flight_track <- function(icao24, as_sf = TRUE) {\n  opensky_response <- request(\"https://opensky-network.org/api/tracks/all?\") |>\n    req_url_query(icao24 = str_to_lower(icao24)) |>\n    req_perform()\n}\n```\n:::\n\n\nThis is the basic body of our request. Note the ```str_to_lower()``` wrapping icao24. The OpenSky API only accepts lower case icao24 addresses. To make life a little easier, I added ```str_to_lower()``` as a failsafe to make sure the request doesn't fail because of a malformed icao24 address. Before we include the code to actually get the response, we should probably add something here that we haven't added to our previous functions, which is a way to tell how many credits we have left. For the OpenSky API, this is contained in the response header ```\"X-Rate-Limit-Remaining\"```. We'll grab that information and output it to the console using ```log_info()```.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_flight_track <- function(icao24, as_sf = TRUE) {\n  opensky_response <- request(\"https://opensky-network.org/api/tracks/all?\") |>\n    req_url_query(icao24 = str_to_lower(icao24)) |>\n    req_perform()\n\n  check_remaining_credits <- opensky_response |>\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n}\n```\n:::\n\n\n... and now we'll add the code to actually get the response:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_flight_track <- function(icao24, as_sf = TRUE) {\n  opensky_response <- request(\"https://opensky-network.org/api/tracks/all?\") |>\n    req_url_query(icao24 = str_to_lower(icao24)) |>\n    req_perform()\n\n  check_remaining_credits <- opensky_response |>\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track <- opensky_response |>\n    resp_body_json() |>\n    as_tibble()\n\n  return(flight_track)\n}\n```\n:::\n\n\nWhat do we get? Well, depending on what time of day you run this, you might get a result, or you might not. So, for the purposes of this tutorial, I'm going to cheat a little bit, find an active flight, capture it, and store it to a CSV.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# flight_track <- get_flight_track(\"A126CC\")\n# write_csv(flight_track, \"data/flight_track.csv\")\n\nread_csv(\"data/flight_track.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 60 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): icao24, callsign\ndbl (2): startTime, endTime\nlgl (1): path\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 × 5\n   icao24 callsign  startTime    endTime path \n   <chr>  <chr>         <dbl>      <dbl> <lgl>\n 1 a126cc UAL2353  1759356477 1759359956 NA   \n 2 a126cc UAL2353  1759356477 1759359956 NA   \n 3 a126cc UAL2353  1759356477 1759359956 NA   \n 4 a126cc UAL2353  1759356477 1759359956 NA   \n 5 a126cc UAL2353  1759356477 1759359956 NA   \n 6 a126cc UAL2353  1759356477 1759359956 NA   \n 7 a126cc UAL2353  1759356477 1759359956 NA   \n 8 a126cc UAL2353  1759356477 1759359956 NA   \n 9 a126cc UAL2353  1759356477 1759359956 NA   \n10 a126cc UAL2353  1759356477 1759359956 NA   \n# ℹ 50 more rows\n```\n\n\n:::\n:::\n\n\nAlright, a few things to note here. One, even though ```path``` claims to be of type ```<lgl>``` and is full of ```NA``` values, that's because ```path``` actually comes through as a list-column. So we'll need to do that unnesting procedure that we've done many times before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_flight_track <- function(icao24, as_sf = TRUE) {\n  opensky_response <- request(\"https://opensky-network.org/api/tracks/all?\") |>\n    req_url_query(icao24 = str_to_lower(icao24)) |>\n    req_perform()\n\n  check_remaining_credits <- opensky_response |>\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track <- opensky_response |>\n    resp_body_json() |>\n    as_tibble() |>\n    unnest_wider(col = path, names_sep = \"_\")\n\n  return(flight_track)\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# flight_track <- get_flight_track(\"A126CC\")\n# write_csv(flight_track, \"data/flight_track_2.csv\")\n\nread_csv(\"data/flight_track_2.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 60 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): icao24, callsign\ndbl (7): startTime, endTime, path_1, path_2, path_3, path_4, path_5\nlgl (1): path_6\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 × 10\n   icao24 callsign  startTime  endTime path_1 path_2 path_3 path_4 path_5 path_6\n   <chr>  <chr>         <dbl>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <lgl> \n 1 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    142 FALSE \n 2 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    131 FALSE \n 3 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    124 FALSE \n 4 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    122 FALSE \n 5 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    304    121 FALSE \n 6 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    609    123 FALSE \n 7 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.3    609    124 FALSE \n 8 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.2    914    126 FALSE \n 9 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.9  -95.2   1219    125 FALSE \n10 a126cc UAL2353  1759356477   1.76e9 1.76e9   29.8  -95.2   1524    124 FALSE \n# ℹ 50 more rows\n```\n\n\n:::\n:::\n\n\nOkay. Unlike the adsb.lol API response which returns *named* lists, the OpenSky API returns an *unnamed* list that we have to unnest. This means we get less descriptive column names when we run ```unnest_wider()```, since we're lacking the metadata that a named list gives us, hence the ```path_1```, ```path_2```, ```path_n``` schema. Luckily, if we take a look at the OpenSky API documents again, each property of the JSON response is documented by index.\n\n![](assets/opensky_tracks.png)\n\nR is a one-based indexed language, so shift every value of the index in that table by 1. Doing that, we can rename our columns by including this bit of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename(\n  timestamp = path_1,\n  latitude = path_2,\n  longitude = path_3,\n  baro_altitude = path_4,\n  true_track = path_5,\n  on_ground = path_6\n)\n```\n:::\n\n\nThe columns ```startTime```, ```endTime```, and ```timestamp``` are currently long numeric strings, because they represent Unix time: a running total of seconds since January 1, 1970, midnight UTC. I'm not sure about the merits of using Unix timestamp, and I won't go down that rabbit hole right now, but I'll extend you the courtesy of linking the [Wikipedia article on Unix time](https://en.wikipedia.org/wiki/Unix_time) if you're so inclined. ```lubridate```'s got a function, ```as_datetime()```, that helps us convert Unix timestamps into something more intelligible. We'll mutate across all the time columns to convert them into human (and machine) readable timestamps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_flight_track <- function(icao24) {\n  opensky_response <- request(\"https://opensky-network.org/api/tracks/all?\") |>\n    req_url_query(icao24 = str_to_lower(icao24)) |>\n    req_perform()\n\n  check_remaining_credits <- opensky_response |>\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track <- opensky_response |>\n    resp_body_json() |>\n    as_tibble() |>\n    unnest_wider(col = path, names_sep = \"_\") |>\n    rename(\n      timestamp = path_1,\n      latitude = path_2,\n      longitude = path_3,\n      baro_altitude = path_4,\n      true_track = path_5,\n      on_ground = path_6\n    ) |>\n    mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |>\n    mutate(callsign = trimws(callsign)) |>\n    arrange(timestamp)\n\n  return(flight_track)\n}\n```\n:::\n\n\nFinally, we're dealing with geospatial data here. This data has a bunch of rows, and that's because it has a bunch of different coordinates throughout time. For present purposes, we really just want the complete picture of an aircraft's flight path up until the point in time we pulled its data. So let's summarize the data, convert it to a simple features dataframe, and cast it to ```\"LINESTRING\"```. We'll do that by using ```st_as_sf()``` to convert the data to a simple features dataframe, specifying ```coords = c(\"longitude\", \"latitude\", \"baro_altitude\")``` as the X, Y, and Z (height) dimensions of our data. We can specify ```dim = \"XYZ\"```, though the default of this function already captures this, so it can be omitted. Finally, we need to define the projection system. The World Geodetic System, WGS, and its current version, 84, is the standard, hence we'll specify 4326 for WGS84.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.13.1, GDAL 3.11.0, PROJ 9.6.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nget_flight_track <- function(icao24, as_sf = TRUE) {\n  opensky_response <- request(\"https://opensky-network.org/api/tracks/all?\") |>\n    req_url_query(icao24 = str_to_lower(icao24)) |>\n    req_perform()\n\n  check_remaining_credits <- opensky_response |>\n    resp_header(\"X-Rate-Limit-Remaining\")\n\n  log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n  flight_track <- opensky_response |>\n    resp_body_json() |>\n    as_tibble() |>\n    unnest_wider(col = path, names_sep = \"_\") |>\n    rename(\n      timestamp = path_1,\n      latitude = path_2,\n      longitude = path_3,\n      baro_altitude = path_4,\n      true_track = path_5,\n      on_ground = path_6\n    ) |>\n    mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |>\n    mutate(callsign = trimws(callsign)) |>\n    arrange(timestamp)\n\n  if (as_sf) {\n    flight_track <- st_as_sf(\n      flight_track,\n      coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n      dim = \"XYZ\",\n      crs = 4326\n    ) |>\n      group_by(icao24, callsign) |>\n      summarize(do_union = FALSE) |>\n      st_cast(\"LINESTRING\") |>\n      st_wrap_dateline()\n  }\n  return(flight_track)\n}\n```\n:::\n\n\nEasy, right? Well, easier than me trying to figure out why on Earth I was getting weird lines for the longest time. I'll draw special attention to two things here:\n\n1. ```summarize(do_union = FALSE)```: prevents sf from trying to union all the geometries (in this case, points) together when summarizing. If you fail to specify this argument, what you get is a weird connection of lines rather than a flight track.\n2. ```st_wrap_dateline()```: If you've ever mapped anything in the Pacific Ocean, you'll probably be painfully aware that computers seem to have a tough time with the international date line.[^1] The date line causes a discontinuity in the coordinate system, particularly on the WGS84 projection. Interactive maps generally solve this issue, but, again, if you're projecting data using WGS84, the coordinate system will have a discontinuity, and so ```sf``` will, rightfully, wrap your line around the other side of the world to make a valid, continuous geometry. ```st_wrap_dateline()``` solves this problem by detecting geometry that crosses the international date line, splitting it, and casting to ```\"MULTILINESTRING\"```.\n\n[^1]: I imagine there's an opportunity for a self-deprecating joke here. I don't want to write it out and you're probably clever enough to infer it considering I'm more content sitting in front of my computer typing this than actually going outside.\n\nI mentioned above as well as in @sec-tolled-boxes that this function will fail and consume credits if the queried icao24 address is not actually in flight at the moment. Let's add error handling for that similar to our other functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_flight_track <- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response <- request(\n        \"https://opensky-network.org/api/tracks/all?\"\n      ) |>\n        req_url_query(icao24 = str_to_lower(icao24)) |>\n        req_perform()\n\n      check_remaining_credits <- opensky_response |>\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_track <- opensky_response |>\n        resp_body_json() |>\n        as_tibble() |>\n        unnest_wider(col = path, names_sep = \"_\") |>\n        rename(\n          timestamp = path_1,\n          latitude = path_2,\n          longitude = path_3,\n          baro_altitude = path_4,\n          true_track = path_5,\n          on_ground = path_6\n        ) |>\n        mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |>\n        mutate(callsign = trimws(callsign)) |>\n        arrange(timestamp)\n\n      if (as_sf) {\n        flight_track <- st_as_sf(\n          flight_track,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        ) |>\n          group_by(icao24, callsign) |>\n          summarize(do_union = FALSE) |>\n          st_cast(\"LINESTRING\") |>\n          st_wrap_dateline()\n      }\n      return(flight_track)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving flight track for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position <- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n```\n:::\n\n\nIf the function doesn't return any data, it could very well be the case that the aircraft associated with the icao24 address is inactive (on the ground) at the moment. For actually valid icao24 values, it seems fair to return a tibble with the icao24 value and a status of ```TRUE``` for ```on_ground```. If we were to build this out further, we'd probably want to add some validation to the user's icao24 input.\n\n:::{.callout}\nThe way I've handled the errors here is anticipation of using ```map()``` on this function, and this isn't the only way, or maybe even the best way, to achieve this goal. One could use ```possibly()``` or ```safely()``` as alternatives which will move past errors when applying this function against a vector. But, for present purposes, this is what I've went with.\n:::\n\nOkay, let's do the same thing for state vectors. A lot of this is going to be similar so I'm going to move substantially quicker through this one. The base URL this time is ```https://opensky-network.org/api/states/all?```, the arguments we need to pass (icao24) are the same, and we've got a whole bunch more return values. Spoiler: we'll need to unnest, rename, coerce Unix values, and convert to simple features like last time. What's different this time is that we've got a ```callsign``` column with some whitespace in it. We'll deal with the whitespace using ```mutate(callsign = trimws(callsign))``` to get rid of it. We'll call this function ```get_state_vector```.\n\n![](assets/opensky_states.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_state_vector <- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response <- request(\n        \"https://opensky-network.org/api/states/all?\"\n      ) |>\n        req_url_query(icao24 = str_to_lower(icao24)) |>\n        req_perform()\n\n      check_remaining_credits <- opensky_response |>\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_position <- opensky_response |>\n        resp_body_json() |>\n        as_tibble() |>\n        unnest_wider(col = states, names_sep = \"_\") |>\n        rename(\n          icao24 = states_1,\n          callsign = states_2,\n          origin_country = states_3,\n          time_position = states_4,\n          last_contact = states_5,\n          longitude = states_6,\n          latitude = states_7,\n          baro_altitude = states_8,\n          on_ground = states_9,\n          velocity = states_10,\n          true_track = states_11,\n          vertical_rate = states_12,\n          sensors = states_13,\n          geo_altitude = states_14,\n          squawk = states_15,\n          special_purpose = states_16,\n          position_source = states_17\n        ) |>\n        mutate(callsign = trimws(callsign)) |>\n        mutate(across(c(time, time_position, last_contact), \\(x) {\n          as_datetime(x)\n        }))\n\n      if (as_sf) {\n        flight_position <- st_as_sf(\n          flight_position,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        )\n      }\n\n      return(flight_position)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving state vector for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position <- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n```\n:::\n\n\nLet's save this data for later using a geoparquet file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sfarrow)\n\n# st_write_parquet(get_flight_track(\"A126CC\"), \"data/flight_track.parquet\")\n# st_write_parquet(get_state_vector(\"A126CC\"), \"data/state_vector.parquet\")\n\nst_read_parquet(\"data/flight_track.parquet\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 2 fields\nGeometry type: LINESTRING\nDimension:     XYZ\nBounding box:  xmin: -95.3315 ymin: 28.0255 xmax: -87.0249 ymax: 29.9453\nz_range:       zmin: 304 zmax: 10668\nGeodetic CRS:  WGS 84\n  icao24 callsign                       geometry\n1 a126cc  UAL2353 LINESTRING Z (-95.3315 29.9...\n```\n\n\n:::\n\n```{.r .cell-code}\nst_read_parquet(\"data/state_vector.parquet\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 15 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: -87.0249 ymin: 28.0255 xmax: -87.0249 ymax: 28.0255\nz_range:       zmin: 10668 zmax: 10668\nGeodetic CRS:  WGS 84\n                 time icao24 callsign origin_country       time_position\n1 2025-10-01 23:05:56 a126cc  UAL2353  United States 2025-10-01 23:05:56\n         last_contact on_ground velocity true_track vertical_rate sensors\n1 2025-10-01 23:05:56     FALSE   267.79     112.48             0      NA\n  geo_altitude squawk special_purpose position_source\n1     11254.74     NA           FALSE               0\n                        geometry\n1 POINT Z (-87.0249 28.0255 1...\n```\n\n\n:::\n:::\n\n\n#### Interacting as an Authenticated User\nIf we want to up our credit limit from 400 to 4,000 we'll need to register with OpenSky. You can do that by clicking sign in [here](https://opensky-network.org/). Once you create an account, you'll see a box on the right-hand sign of your screen to issue credentials. Your credentials will come in the form of a JSON file called credentials.json.\n\nOpenSky uses an OAuth2 client credentials flow to authenticate requests to the API. All you need to know about that at the moment is ```httr2``` has a fairly straightforward way to deal with this. First, we'll need to define our ```oauth_client```:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclient1 <-\n  oauth_client(\n    id = Sys.getenv(\"OPENSKY_CLIENT_ID\"),\n    token_url = \"https://auth.opensky-network.org/auth/realms/opensky-network/protocol/openid-connect/token\",\n    secret = Sys.getenv(\"OPENSKY_CLIENT_SECRET\"),\n    auth = \"header\"\n  )\n```\n:::\n\n\n... where ```token_url``` is where we get our token from, ```id``` is the ID in our credential.json file we got from OpenSky, and ```secret``` is the ```secret``` in our credential.json file.\n\nI use ```Sys.getenv()``` here for reasons I'll get into in @sec-deployment. You can use the ```keyring``` package and ```httr2``` has some built-in functions for you to use as well. But for now, let's use ```Sys.getenv()```.\n\nAs Hadley Wickham writes in the [secrets portion of the httr2 documentation](https://httr2.r-lib.org/reference/secrets.html):\n\n> While you can manage the key explicitly in a variable, it's much easier to store in an environment variable. In real life, you should NEVER use `Sys.setenv()` to create this env var because you will also store the secret in your `.Rhistory`. Instead add it to your .Renviron using `usethis::edit_r_environ()` or similar.\n\nAdd this to your .Renviron file:\n```\nOPENSKY_CLIENT_ID=\"{your_id}\"\nOPENSKY_CLIENT_SECRET=\"{your_secret}\"\n```\n\nFor example:\n```\nOPENSKY_CLIENT_ID=\"youropenskyid@whatever_this_domain_was_probably_openskyapi.com\"\nOPENSKY_CLIENT_SECRET=\"imnotputtingarealsecretinhereasanexamplewejustmetmaybegettoknowmealittlemorefirst\"\n```\n\nAfter you've done that and defined client1 somewhere in your script (you can also define it within the functions below), we'll modify our OpenSky functions slightly by adding one line: ```req_oauth_client_credentials(client1) |>```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclient1 <-\n  oauth_client(\n    id = Sys.getenv(\"OPENSKY_CLIENT_ID\"),\n    token_url = \"https://auth.opensky-network.org/auth/realms/opensky-network/protocol/openid-connect/token\",\n    secret = Sys.getenv(\"OPENSKY_CLIENT_SECRET\"),\n    auth = \"header\"\n  )\n\n# The line we're adding:\n# req_oauth_client_credentials(client1) |>\n\nget_flight_track <- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response <- request(\n        \"https://opensky-network.org/api/tracks/all?\"\n      ) |>\n        req_oauth_client_credentials(client1) |>\n        req_url_query(icao24 = str_to_lower(icao24)) |>\n        req_perform()\n\n      check_remaining_credits <- opensky_response |>\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_track <- opensky_response |>\n        resp_body_json() |>\n        as_tibble() |>\n        unnest_wider(col = path, names_sep = \"_\") |>\n        rename(\n          timestamp = path_1,\n          latitude = path_2,\n          longitude = path_3,\n          baro_altitude = path_4,\n          true_track = path_5,\n          on_ground = path_6\n        ) |>\n        mutate(across(c(startTime, endTime, timestamp), \\(x) as_datetime(x))) |>\n        mutate(callsign = trimws(callsign)) |>\n        arrange(timestamp)\n\n      if (as_sf) {\n        flight_track <- st_as_sf(\n          flight_track,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        ) |>\n          group_by(icao24, callsign) |>\n          summarize(do_union = FALSE) |>\n          st_cast(\"LINESTRING\") |>\n          st_wrap_dateline()\n      }\n      return(flight_track)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving flight track for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position <- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n\nget_state_vector <- function(icao24, as_sf = TRUE) {\n  tryCatch(\n    {\n      opensky_response <- request(\n        \"https://opensky-network.org/api/states/all?\"\n      ) |>\n        req_oauth_client_credentials(client1) |>\n        req_url_query(icao24 = str_to_lower(icao24)) |>\n        req_perform()\n\n      check_remaining_credits <- opensky_response |>\n        resp_header(\"X-Rate-Limit-Remaining\")\n\n      log_info(\"Remaining API credits: {check_remaining_credits}\")\n\n      flight_position <- opensky_response |>\n        resp_body_json() |>\n        as_tibble() |>\n        unnest_wider(col = states, names_sep = \"_\") |>\n        rename(\n          icao24 = states_1,\n          callsign = states_2,\n          origin_country = states_3,\n          time_position = states_4,\n          last_contact = states_5,\n          longitude = states_6,\n          latitude = states_7,\n          baro_altitude = states_8,\n          on_ground = states_9,\n          velocity = states_10,\n          true_track = states_11,\n          vertical_rate = states_12,\n          sensors = states_13,\n          geo_altitude = states_14,\n          squawk = states_15,\n          special_purpose = states_16,\n          position_source = states_17\n        ) |>\n        mutate(callsign = trimws(callsign)) |>\n        mutate(across(c(time, time_position, last_contact), \\(x) {\n          as_datetime(x)\n        }))\n\n      if (as_sf) {\n        flight_position <- st_as_sf(\n          flight_position,\n          coords = c(\"longitude\", \"latitude\", \"baro_altitude\"),\n          dim = \"XYZ\",\n          crs = 4326\n        )\n      }\n\n      return(flight_position)\n    },\n    error = function(e) {\n      log_error(\n        \"Error occurred when retrieving state vector for {icao24}. {e} Check your icao24 value: {icao24} may be valid but currently inactive.\"\n      )\n      flight_position <- tibble(\n        icao24 = str_to_lower(icao24),\n        on_ground = TRUE\n      )\n    }\n  )\n}\n```\n:::\n\n\nWell, that was a lot. We still don't even have all of our data yet! We're still missing our fleet information. To be continued... in the next chapter.",
    "supporting": [
      "get_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}