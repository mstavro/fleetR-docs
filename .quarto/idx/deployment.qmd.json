{"title":"Deploying via GitHub Actions","markdown":{"headingText":"Deploying via GitHub Actions","containsRefs":false,"markdown":"We're at the last part. We laugh, we cried, we made some friends along the way - okay, we didn't do any of that. We did make a lot of tables, though. Now all that's left is sharing them with the world.\n\n## Putting into Quarto and Styling\nBefore we talk about GitHub pages, you're going to want to put the pieces we've assembled in the previous chapters into a Quarto document - specifically, the web development pieces that came out of @sec-map-table and @sec-many-tables. I've got an example for you to use [here](https://github.com/mstavro/united-explorer/blob/main/index.qmd).\n\nAnother interject: I neglected to share some styling things to spruce up your dashboard before deployment. I mentioned SCSS rules in @sec-map-table, but here's the full SCSS you might want to have:\n\n```\n$navbar-bg: black;\n$navbar-fg: white;\n\n/*-- scss:rules --*/\n// CSS rules for styling go here\n// Scale pop-up for different displays\nbody .maplibregl-popup {\n    max-width: 80vw !important; // Default for mobile and small screens (<901px)\n    max-height: 70vh !important;\n    z-index: 1200;\n}\n\n// Rule for displays between 901px and 1351px\n@media screen and (min-width: 901px) and (max-width: 1351px) {\n    body .maplibregl-popup {\n        max-width: 60vw !important; // Larger on \"tablet\" and medium desktop displays\n    }\n}\n\n// Rule for large displays (>1351px)\n@media screen and (min-width: 1352px) {\n    body .maplibregl-popup {\n        max-width: 40vw !important; // Smaller on large desktop displays\n    }\n}\n\nbody .maplibregl-popup-content {\n    overflow-x: auto !important;\n    overflow-y: auto !important;\n}\n```\n\nAdditionally, you might want to use a ```_brand.yml``` file mimicking your airline of choice. Here's mine for United:\n\n```\nmeta:\n  name: United Airlines\n  link: https://www.united.com\n    \nlogo: \n  images:\n    united-logo:\n      path: \"https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\"\n      alt: \"United Airlines\"\n  small: united-logo\n  medium: united-logo\n  large: united-logo\n\ncolor:\n  palette:\n    blue: \"#1414D2\"\n  primary: blue\n  secondary: white\n```\n\nFinally, you're probably going to want a ```_quarto.yml``` file for your project. I'll get to that below.\n\n## Setting up GitHub Pages and GitHub Actions {#sec-deployment}\nI guess it's worth talking about the strategies of deployment quickly. Side note that Hadley Wickham has a [book-in-progress on this](https://r-in-production.org/) and you should probably read it, because what I'm about to give you is the cliff-notes version of a workshop based on said book.\n\nBasically, the first step we should think about when we think through deployment is longevity - i.e., managing package versions. We've got three options for this:\n\n1. YOLO: just send it up on GitHub or Posit Connect or whatever with whatever pak pulls\n2. Pack and ship: use rsconnect::manifest(), which works really well with Posit tools and is really elegant and frankly a really good plug for Posit solutions.\n3. Freeze it: use renv to lock everything.\n\nWe're going to use YOLO, because in the workshop it had a cool picture of a guy hang gliding but also because the packages we use are stable enough for present purposes. Moreover, we are also constantly building our app, and pak/GitHub will package lock our builds at the time of compilation. Moreover moreover, it fits with our current approach of using CDNs and connections to online resources whenever we can. I don't recommend this necessarily if you want an app that you're sure won't suffer from a breaking change. The converse of that is your app won't benefit from improvements/new functionality introduced into packages that take effect natively. So your mileage will vary here.\n\nTo continuously integrate and deploy (CI/CD!) our app, we're going to need a few things:\n\n- GitHub Pages\n- A GitHub action to render and deploy our index.qmd to pages\n- A GitHub action to pull the United fleet Google Sheet every so often in case United takes new deliveries (or some planes go inactive)\n\n### GitHub Pages\nI'm assuming you have GitHub initialized. If you don't, start with this in the console while in your project directory:\n\n```usethis::use_github()```\n\nBefore you go any further, remember when we introduced some secrets in @sec-opensky? Yeah, we're probably going to want to tell GitHub about those. It's okay, I don't think GitHub is interested in telling everyone your secrets.[^1] Navigate to your repository, then go to \"Settings\", and go to \"Secrets and Variables.\" You're going to want to add two repository secrets, one called OPENSKY_CLIENT_ID and the other OPENSKY_CLIENT_SECRET, corresponding to your ID and SECRET in your credentials.json/.Renviron from earlier.\n\n![](assets/repo_secrets.png)\n\n:::{.callout}\nReminder that if you change your secret for whatever reason, change it in the repo. Else you'll be stuck frustrated for at least 2-3 hours like me wondering why your deployment isn't working, only to remember that you rotated your secret.\n:::\n[^1]: In fact, there are some limited things GitHub does to prevent you from accidentally leaking a secret, but if you're really determined, then GitHub's not going to be able to stop you.\n\n**And before you go any further again, you're going to likely want a ```_quarto.yml``` file for your project, even if it's just a standalone page/dashboard.** You don't *need* this; you're able to deploy individual sites without a ```_quarto.yml file.``` Speaking from experience, though, the ```_quarto.yml``` file makes your life a bit easier because it enables you to use the Quarto publish workflow:\n\n```\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\n```\n\nIf you're not sure how to set up a ```_quarto.yaml```, in this case it can be as simple as this:\n\n```\nproject:\n  type: website \n\nwebsite:\n  title: \"Posit Table Contest\"\n  favicon: https://www.united.com/2500e4e62233fbfe8ac6.unitedLogoNew.svg\n```\n\nYou can then set up pages:\n\n```usethis::use_github_pages()```\n\n... and run this command in the terminal:\n\n```\nquarto publish gh-pages\n```\n\nYour Quarto doc will render for its initial deployment to pages. If you're overly eager like me, you might've changed your \"Pages\" setting to \"Deploy from GitHub Actions\" - **change it back** to \"Deploy from a branch\" if that's the case, and make sure it's deploying from \"gh-pages\" (unless you changed the defaults set by ```use_github_pages()```).\n\nAfter the initial render, you should have your first deployment! Hooray! But how do we get it to continuously deploy? Enter GitHub actions.\n\nI've set up an action file called ```render.yml```, which looks something like this:\n\n```\nname: Pull flights, render, and publish\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\npermissions:\n  contents: write\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Install quarto\n      - uses: quarto-dev/quarto-actions/setup@v2\n          \n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\n```\n\nAnd the anatomy of this action is as such:\n```\nname: Pull flights, render, and publish\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\npermissions:\n  contents: write\n```\n\n```name:``` a name for the action that shows up in GitHub\n\n```on:``` creates the conditions under which the action runs:\n- The workflow activates every 30 minutes (you can use [crontab.guru](crontab.guru) for help writing cron jobs)\n- The workflow activates on a workflow dispatch button which appears in GitHub under the \"Actions\" section of your repository\n- Gives the action write permissions, which allows it to write the changes to GitHub pages\n\n```\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Install quarto\n      - uses: quarto-dev/quarto-actions/setup@v2\n          \n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\n```\n\n```jobs:``` actually specifies what's going to take place:\n- The \"runner\", aka, the Microsoft Azure Ubuntu Linux container running the job, will grab your repo and start working on it\n- The runner will install R\n- The runner will then set up dependencies (packages) based on what it detects in your scripts\n- The runner will set up Quarto\n- Finally, the runner will render your Quarto document, and publish to GitHub pages, because you have specified:\n\n```\n        with:\n          target: gh-pages\n```\n\nAdditionally, your runner will actually be able to render your document because you've supplied:\n\n```\n        env:\n          OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}\n          OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}\n```\n\n#### Troubleshooting\nChances are, you're going to run into some obstacles. I hope that providing you with the .yml will mitigate this somewhat, but here's some general notes about failed deployments using this code:\n\n- Some failed deployments are normal. The solution proposed in @sec-tolled-boxes relies, partly, on chance, in the sense that you'll actually pull live aircraft. You may very well pull a segment of aircraft that are all sitting on the ground in a given moment. In this case, the Quarto script fails on purpose because there's nothing to visualize. And it's entirely possible that you could have long stints where you pull nothing, just because you're pulling the wrong aircraft on the network. The best solution here is just to take a larger cross section of aircraft, perhaps trading off on the refresh period (i.e., 30/40 aircraft every hour, on the hour).\n- You rotated your credentials and forgot to update them (me).\n- You haven't successfully rendered the Quarto page at least once locally with ```usethis::use_gh_pages()```\n\nThe best advice for troubleshooting is to check the logs by going to your repo, going to \"Actions,\" and clicking on a failed deployment. Here's an example:\n\n![](assets/failed_deployment_example.png)\n\nHere, ```tbl$destination_plausible``` is missing, likely because no aircraft were returned from our API functions. Similar errors include errors thrown by ```st_as_sf()``` about the absence of geometries and ```left_join()``` about a lack of columns to join, likely due to a missing table.\n\n### Updating Fleet Info\nThe last piece is automatically refreshing the fleet info from Google Sheets. We'll use a separate actions `.yml` file for that called ```update_ua_fleet.yml```.\n\n```\nname: Check for changes to the United mainline fleet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 12 * * *'\n\npermissions:\n  contents: write\n\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Execute the script\n      - name: Query changes to United fleet and update active registrations\n        run: Rscript rebuild_fleet_info.R\n\n      # Commit changes to csv back to the repo\n      - uses: stefanzweifel/git-auto-commit-action@v5\n```\n\nLet's walk through this one like the last:\n\n```\nname: Check for changes to the United mainline fleet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 12 * * *'\n\npermissions:\n  contents: write\n```\n\n```name:``` sets the name we see in GitHub for this action.\n\n```on:``` does the following:\n\n- lets us trigger the action using the workflow dispatch button in actions\n- runs this job at 12:05 UTC daily\n\n```permissions:``` enables the runner to write; specifically, it'll write ```\"data/united_full_fleet_info.csv\"``` and ```\"\"data/compatible_registrations.csv\"\"```\n\n```\njobs:\n  render:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout this repo\n      - uses: actions/checkout@v4\n\n      # Install R\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n\n      # Install R packages from files/DESCRIPTION\n      - uses: r-lib/actions/setup-r-dependencies@v2\n\n      # Execute the script\n      - name: Query changes to United fleet and update active registrations\n        run: Rscript rebuild_fleet_info.R\n\n      # Commit changes to csv back to the repo\n      - uses: stefanzweifel/git-auto-commit-action@v5\n```\n\n```jobs:``` everything's the same here with the exception of the last two:\n\n- ```run: Rscript rebuild_fleet_info.R``` will run our R script\n- ```uses: stefanzweifel/git-auto-commit-action@v5``` will commit the changes the runner makes, i.e., writing the updated CSVs, to the repo\n\n... and that should be all you need to know on the deployment side! You can create these actions by going to the Actions tab under your repo.","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"deployment.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":["cosmo","brand","united.scss"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}